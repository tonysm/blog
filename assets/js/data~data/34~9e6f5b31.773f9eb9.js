(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{284:function(e){e.exports={data:{tag:{title:"development",belongsTo:{edges:[{node:{title:"Desenvolvendo uma API - Parte 2",path:"/blog/desenvolvendo-uma-api-parte-2",date:"7. March 2014",timeToRead:5,description:"Desenvolvendo uma API - Parte 2",coverImage:{type:"image",mimeType:"image/png",src:"/assets/static/api-cloud-tumb.633a126.47a290f.png",size:{width:800,height:200},sizes:"(max-width: 800px) 100vw, 800px",srcset:["/assets/static/api-cloud-tumb.a67b0b2.47a290f.png 480w","/assets/static/api-cloud-tumb.633a126.47a290f.png 800w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 200' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-33'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-33)' width='800' height='200' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFnElEQVRYw81Xa0xURxTeEoUfEH6YYBVobUVtUoGiDVL6x1owUVNtSGz4QYINMa3aIk2koVBAtJSKXW2MLSlKifIURSpvYQF3l0Wpj0JFLFnLVmBlcamLluWxj3u/3pm797IvW9dA0gmzM3t37pw53/m%2bcwYJ5rtZLfyoOguc%2bZhOWZYhH9yfYydtfHwcx45J4evri6qqKjC2bVhbFxpr0AJH3gG%2beQvpG4Pw4boApEQvA3M4CvhqA1jNDX4hY6W2nrVJFhoAehQOAOIwwzCi46QND4/g0SMDNJo/sXzZi5iYnAYGZGCKdwNn93J9D79H6SfADx8AOW/i133h%2bP69V9CzLwyn3n8VHbtDgYzXgYY83tb/CQBWYADDOCwxGAxoaGiCQqHEL93XUVZajpCVKzGsNwDVaWBO7QJ66sBeLQWuloG5Xg1UfIrhz0Lh670IEokEXi9IsMhLggA/H9xMCgHqsmG1gb1gANhT1zmiYmRtALCUAR%2bJDLBYLOjsVOFycwsunK%2bGTqdz2Pt04WmMjD/mHPkSrLJYpD8ZKXwjPRhLWY3w5X7Y/3YQDsW8jC82BiN0uT/6k14Cemv4dQvFAHtHiTMOQbda5wDiAGAFAMqSRU3Lr8jR2/ubiwyEphsdxfnay%2bg5mgT2SiG/n3mWB9Rq5gFp/Q5Tqa8BWeHAoXXAwTdgPLAauJDG5xn%2bEB4RVuKp88J8ZmYGIyMjriDYAIDqDJj8d4E7jRjqqEJdbb24dmpqChMTE1Cr1VQOQqKcmTVxkuhGR8MlUToOrCMf/TKw5SmcTBLBluwDbtXMAfocIEieh/6FhYUICgrCkiVLEBERgba2NvrcZDLBYuY6Nzff6waKdkF7JA4//yjFuOExH2ndGJKSkpCTk4PExERIpVL63GKxirZk7QroH%2brn7ApBEOZOlYK1Oc0uJAME2peWltIklJCQgIKCAmzatIl%2bHxgYcPtu1607GHv0RPw%2bNHQfFRUVKCkpQV9fH5TKTtEdYmOGM9PZ2QWtVjvHPjHCLK9xxpboSMTtNe%2bh8x5LgLTQ0FBERUXh2rVriIyMRF5eHry8vBAdHY3c3FxkZGQgMzMTWVmZSPs8FQe5uXHaDP3ELExmK6yMOwMMDH%2bboBkz4a56CI0NjTRX2DPPXoZEbgQsK5Gbm7vFggFAjC5dupQ639TURCOvUCjg7%2b9P5bB9%2b3Zs2bIFW7duxbZt27B582bs2bMXnVy5u6czoqtfjz9GjRh/YoJxxgrtXyYM6qbxwMDg/tgUZG1X0NzUzOWFCZfcY59nXCov99ylGs03AILx%2bPh4rFmzBuXl5cjPz0dlZSUFori4%2bKnv31Vr0P6TFI0FuZCruvG7Ro9e9UO0tHehtr4Fl1vlOPatFH23b4vvMIx758l3lUqF6upqmnuMRqNtPfNcIDxzEhQoOcqVq%2bDgYOp0YGAgHePi4ujv5JBms5kyhXQyt5pm%2bQ1qMrgafwj9mgdob21BO3f427293BoTKrmcEBISQtfb23J2vqOjg4JPbAo9ICAARUVFDiB4IgePJCAcjJSxkydPIiUlhSY0Z5AcdMnplDxlLmaBrf/a7f5yuZw6Njk56eKIkHxJtInDPj4%2bFHihE%2bmR5ydOnHBhyrwC4AyC8%2b8OUbOr26zFxI%2bXcsA2HqFgsBYzXSdEXCaTUQDI3eJp7COsW79%2bPU2ysbGx2LFjB80zpBolJydTYAYHB596xnm9BxADAsXJ6FZ7TuWLLdsP9twB8VZnn1dIdFetWkUvRWTP6elpCoagbyH6xNmYmBgHCZCenZ1Nx%2bPHj4vJel4Z8G%2bAuDUk1GjSbl4EjsYChzfwPT8GuHHB9m8DT2%2blUglvb2%2bsXbsW4eHhCAsLEzu5aK1YsYI6uHPnTlphyHzx4sV09PPzQ3p6Op2npqa6VIX/av8Ar7VJh2FSCdEAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},content:'<p>Atualmente o modelo de API\'s mais utilizado é o REST. Não conhece? Explicarei um pouco aqui do funcionamento desse modelo. A teoria é bem simples, na verdade, mas muitas vezes subestimada.</p>\n<p>Para começo de conversa, vou linkar aqui um video que abriu a minha cabeça para o que é REST de verdade. O video se chama "Teach a dog to REST" e é incrível! Esse video caiu como uma luva para mim, pois eu tinha acabado de fazer uma API num antigo trabalho e não tinha o menor conhecimento sobre REST, acabei cometendo vários erros como as URLs mostradas no vídeo. Sem mais delongas, assistam ao <a href="https://vimeo.com/17785736" target="_blank" rel="nofollow noopener noreferrer">video</a>.</p>\n<p>Construir uma API é um processo que parece simples no começo, mas, acreditem, é complexo pra caramba! REST é o conceito básico das API hoje em dia, existem outros modelos como o SOAP, mas não vou entrar em detalhes, até porque nunca os usei na prática.</p>\n<p>Uma boa API é um problema de design, como é falado no vídeo. A API que citei acredito que ainda está em uso hoje em dia e alguns erros foram cometidos no processo de desenvolvimento. Não por ser um time ruim, mas porque eramos todos novos no ramo e não conheciamos as melhores práticas e todo o universo por trás das APIs.</p>\n<p>Fizemos URL\'s feias, como essas:</p>\n<pre>\n/getAllUsersWithTasks\n/getAllFinishedTasks\n/getAllPendingTasksWithUser/{user\\_id}\n</pre>\n<p>Qual o recurso negóciado nessas URL\'s? Não dá pra saber só de olhar a URL, temos que tentar ler a mesma e compreender o que pode vir dela. Ah, e basicamente só utilizavamos dois métodos HTTP para os requests GET e POST.</p>\n<h2 id="o-que-é-necessário"><a href="#o-que-%C3%A9-necess%C3%A1rio" aria-hidden="true"><span class="icon icon-link"></span></a>O que é necessário</h2>\n<p>Vou listar aqui o que eu acredito ser necessário para uma boa API REST.</p>\n<ul>\n<li>Utilizar muito bem os vérbos HTTP</li>\n<li>Utilizar apenas recursos nas URLs</li>\n<li>Toda complexidade deve ser tratada fora da URL (depois do ?)</li>\n<li>Linkar muito bem os recursos (Relacionamentos)</li>\n<li>Pense sempre RESTful</li>\n</ul>\n<h2 id="utilizando-110-do-http"><a href="#utilizando-110-do-http" aria-hidden="true"><span class="icon icon-link"></span></a>Utilizando 110% do HTTP</h2>\n<p>Todos os <em>clients</em> que irão utilizar nossas API\'s REST a farão (até onde sei) via HTTP. HTTP é um protocolo de comunicação que é a base da nossa WEB. Para melhor entendermos REST, precisamos entender o HTTP. Existem cerca de 9 métodos HTTP, conforme a <a href="http://pt.wikipedia.org/wiki/Hypertext_Transfer_Protocol#M.C3.A9todos" target="_blank" rel="nofollow noopener noreferrer">Wikipédia</a>, mas falaremos basicamente de 6, são eles: GET, POST, PATCH, PUT, DELETE e OPTIONS.</p>\n<p>Abaixo, vamos entender melhor o que são cada um desses métodos:</p>\n<ul>\n<li>GET - solicitar recursos;</li>\n<li>POST - criar recursos;</li>\n<li>PUT - atualizar um recurso por completo;</li>\n<li>PATCH - atualizar parte de um recurso;</li>\n<li>DELETE - excluir um recurso;</li>\n<li>OPTIONS - utilizado por apps front-end para saber quais métodos estão disponíveis na nossa API (ver <a href="http://pt.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="nofollow noopener noreferrer">CORs</a>);</li>\n</ul>\n<p>Falaremos mais sobre o CORs depois.</p>\n<h2 id="exemplos"><a href="#exemplos" aria-hidden="true"><span class="icon icon-link"></span></a>Exemplos</h2>\n<p>Um exemplo de request para a nossa API usando GET:</p>\n<pre>\nGET /dogs HTTP1.1\nHost: www.example.com\n</pre>\n<p>Esse exemplo acima poderia ser utilizado caso o usuário precisasse listar todos os cachorros, por exemplo. Não estamos considerando paginação ainda.</p>\n<p>Para criar um novo cachorro na API, utilizaria o método POST:</p>\n<pre>\nPOST /dogs HTTP 1.1\nHost: www.example.com\nPayload: {"name": "Luke", "race": "unknown"}\n</pre>\n<p>Você pode ver que a URL é a mesma, porém o método HTTP agora é POST e enviamos para o servidor os dados do novo cachorro via payload.</p>\n<p>Agora, digamos que queremos atualizar o nome do cachorro acima e que o mesmo é representado pelo ID 1, temos então um PATCH:</p>\n<pre>\nPATCH /dogs/1 HTTP 1.1\nHost: www.example.com\nPayload: {"name": "Luke teste"}\n</pre>\n<p>Pronto. Com isso, atualizamos o nome do nosso cachorro. Um detalhe aqui é que utilizamos o método PATCH e não PUT. Por que? Porque o PUT é utilizado quando queremos atualizar todos os atributos de um recurso. É um <em>replace</em>, praticamente.</p>\n<p>Para deletar o cachorro cadastrado, utilizamos o método DELETE:</p>\n<pre>\nDELETE /dogs/1 HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Pronto. Nosso cachorro foi excluído.</p>\n<p>Vejam que não entramos em detalhes sobre o payload ou sobre as respostas, isso será tratado mais para frente, em outro post.</p>\n<h2 id="complexidades"><a href="#complexidades" aria-hidden="true"><span class="icon icon-link"></span></a>Complexidades</h2>\n<p>Mas, claro, nem tudo são flores. Digamos que eu queira listar apenas os cachorros sem raça, como eu faria? Seguindo o padrão (errado) apresentado no começo do artigo, seria algo mais ou menos assim:</p>\n<pre>\nGET /dogsWithUnknownRace HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Certo. Já vimos que isso é errado, então, não façam assim. Mas de que outra forma podemos passar complexidades para nossas URL\'s? Resposta: Não passe. Mantenha a complexidade fora da URL. Como? Assim:</p>\n<pre>\nGET /dogs?race=unknown HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Dessa forma, sabemos exatamente que estamos listando cachorros apenas com raça desconhecida. Assim, mantemos a complexidade fora da URL, e essa fica apenas com o nosso recurso principal. Vamos para mais um exemplo: Digamos que você agora quer listar todos os cachorros de raça desconhecida da cor preta.</p>\n<pre>\nGET /dogs?race=unknown&color=black HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Bom, espero que tenham entendido onde quero chegar.</p>\n<h2 id="relacionamentos"><a href="#relacionamentos" aria-hidden="true"><span class="icon icon-link"></span></a>Relacionamentos</h2>\n<p>Digamos que os usuários da nossa API são os donos dos cachorros. Para saber qual o dono do cachorro de ID 1, por exemplo, temos o seguinte request:</p>\n<pre>\nGET /dogs/1/owners HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Agora, digamos que o dono do cachorro de ID 1, tenha outros 2 cachorros e seu ID na API é 42, para saber quais os cachorros que esse usuário tem, podemos fazer assim:</p>\n<pre>\nGET /owners/42/dogs HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Como exemplificado acima, podemos ter mais de uma forma para acessar um recurso. Fica a cargo do time escolher quais os recursos principais e mais coesos e onde e quando utilizar os recursos de relacionamento.</p>\n<p>Um ponto importante sobre relacionamentos é que o ultimo recurso da URL deve ser o foco da requisição. Ou seja, na url <em>/dogs/42/owners</em> estamos falando dos <em>owners</em> e não dos cachorros. O cachorro só está ai por conta do relacionamento.</p>\n<h2 id="concluindo"><a href="#concluindo" aria-hidden="true"><span class="icon icon-link"></span></a>Concluindo...</h2>\n<p>Bom, é isso. Isso é o básico do REST. Não entrei em detalhes sobre HEADERS e outros detalhes mais que pretendo falar mais pra frente. A ideia principal aqui é ser coeso. Não colocar complexidades nas URLs e essas serem apenas recursos, não verbos. Utilizar ao máximo o que o HTTP tem para nos oferecer e documentar tudo que pudermos.</p>\n<p>Uma boa documentação é uma excelente aliada. Outro ponto importante é sempre usar o plural nos recursos, faz mais sentido (basta ler para perceber) do que usar singulares. Não precisa usar IDs não URLs também. Podemos utilizar qualquer atributo único no lugar do ID, embora eu prefira os IDs.</p>\n<p>É isso, pessoal. Espero ter deixado claro o funcionamento básico do REST. Qualquer dúvida, podem falar.</p>\n'}},{node:{title:"Desenvolvendo uma API - parte 1",path:"/blog/desenvolvendo-uma-api-parte-1",date:"6. March 2014",timeToRead:1,description:"Desenvolvendo uma API - parte 1",coverImage:{type:"image",mimeType:"image/png",src:"/assets/static/api-cloud-tumb.633a126.47a290f.png",size:{width:800,height:200},sizes:"(max-width: 800px) 100vw, 800px",srcset:["/assets/static/api-cloud-tumb.a67b0b2.47a290f.png 480w","/assets/static/api-cloud-tumb.633a126.47a290f.png 800w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 200' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-34'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-34)' width='800' height='200' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFnElEQVRYw81Xa0xURxTeEoUfEH6YYBVobUVtUoGiDVL6x1owUVNtSGz4QYINMa3aIk2koVBAtJSKXW2MLSlKifIURSpvYQF3l0Wpj0JFLFnLVmBlcamLluWxj3u/3pm797IvW9dA0gmzM3t37pw53/m%2bcwYJ5rtZLfyoOguc%2bZhOWZYhH9yfYydtfHwcx45J4evri6qqKjC2bVhbFxpr0AJH3gG%2beQvpG4Pw4boApEQvA3M4CvhqA1jNDX4hY6W2nrVJFhoAehQOAOIwwzCi46QND4/g0SMDNJo/sXzZi5iYnAYGZGCKdwNn93J9D79H6SfADx8AOW/i133h%2bP69V9CzLwyn3n8VHbtDgYzXgYY83tb/CQBWYADDOCwxGAxoaGiCQqHEL93XUVZajpCVKzGsNwDVaWBO7QJ66sBeLQWuloG5Xg1UfIrhz0Lh670IEokEXi9IsMhLggA/H9xMCgHqsmG1gb1gANhT1zmiYmRtALCUAR%2bJDLBYLOjsVOFycwsunK%2bGTqdz2Pt04WmMjD/mHPkSrLJYpD8ZKXwjPRhLWY3w5X7Y/3YQDsW8jC82BiN0uT/6k14Cemv4dQvFAHtHiTMOQbda5wDiAGAFAMqSRU3Lr8jR2/ubiwyEphsdxfnay%2bg5mgT2SiG/n3mWB9Rq5gFp/Q5Tqa8BWeHAoXXAwTdgPLAauJDG5xn%2bEB4RVuKp88J8ZmYGIyMjriDYAIDqDJj8d4E7jRjqqEJdbb24dmpqChMTE1Cr1VQOQqKcmTVxkuhGR8MlUToOrCMf/TKw5SmcTBLBluwDbtXMAfocIEieh/6FhYUICgrCkiVLEBERgba2NvrcZDLBYuY6Nzff6waKdkF7JA4//yjFuOExH2ndGJKSkpCTk4PExERIpVL63GKxirZk7QroH%2brn7ApBEOZOlYK1Oc0uJAME2peWltIklJCQgIKCAmzatIl%2bHxgYcPtu1607GHv0RPw%2bNHQfFRUVKCkpQV9fH5TKTtEdYmOGM9PZ2QWtVjvHPjHCLK9xxpboSMTtNe%2bh8x5LgLTQ0FBERUXh2rVriIyMRF5eHry8vBAdHY3c3FxkZGQgMzMTWVmZSPs8FQe5uXHaDP3ELExmK6yMOwMMDH%2bboBkz4a56CI0NjTRX2DPPXoZEbgQsK5Gbm7vFggFAjC5dupQ639TURCOvUCjg7%2b9P5bB9%2b3Zs2bIFW7duxbZt27B582bs2bMXnVy5u6czoqtfjz9GjRh/YoJxxgrtXyYM6qbxwMDg/tgUZG1X0NzUzOWFCZfcY59nXCov99ylGs03AILx%2bPh4rFmzBuXl5cjPz0dlZSUFori4%2bKnv31Vr0P6TFI0FuZCruvG7Ro9e9UO0tHehtr4Fl1vlOPatFH23b4vvMIx758l3lUqF6upqmnuMRqNtPfNcIDxzEhQoOcqVq%2bDgYOp0YGAgHePi4ujv5JBms5kyhXQyt5pm%2bQ1qMrgafwj9mgdob21BO3f427293BoTKrmcEBISQtfb23J2vqOjg4JPbAo9ICAARUVFDiB4IgePJCAcjJSxkydPIiUlhSY0Z5AcdMnplDxlLmaBrf/a7f5yuZw6Njk56eKIkHxJtInDPj4%2bFHihE%2bmR5ydOnHBhyrwC4AyC8%2b8OUbOr26zFxI%2bXcsA2HqFgsBYzXSdEXCaTUQDI3eJp7COsW79%2bPU2ysbGx2LFjB80zpBolJydTYAYHB596xnm9BxADAsXJ6FZ7TuWLLdsP9twB8VZnn1dIdFetWkUvRWTP6elpCoagbyH6xNmYmBgHCZCenZ1Nx%2bPHj4vJel4Z8G%2bAuDUk1GjSbl4EjsYChzfwPT8GuHHB9m8DT2%2blUglvb2%2bsXbsW4eHhCAsLEzu5aK1YsYI6uHPnTlphyHzx4sV09PPzQ3p6Op2npqa6VIX/av8Ar7VJh2FSCdEAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},content:'<p>Saber desenvolver uma API é muito importante nos dias de hoje. Com o avanço das tecnologias (see Internet of Things) temos cada vez mais a necessidade de fazer softwares que possam se comunicar tanto com o browser (front-end), com mobile clients (Android, iOS, Windows, BlackBerry, etc, etc...), quanto com nossas geladeiras. Partindo dessa necessidade de termos uma aplicação sendo utilizada por várias tecnologias diferentes que surgem as populares API\'s.</p>\n<p>Uma API nada mais é do que, citando a Wikipédia:</p>\n<blockquote>\n<p>No contexto de desenvolvimento web, uma API é um conjunto definido de mensagens de requisição e resposta HTTP, geralmente expressado nos formatos XML ou JSON. Ainda que o termo seja um sinônimo para web service, a chamada Web 2.0 está aos poucos depreciando o modelo de serviços SOAP para a técnica REST. - <a href="http://pt.wikipedia.org/wiki/API" target="_blank" rel="nofollow noopener noreferrer">Wikipédia</a></p>\n</blockquote>\n<p>Essa imagem descreve melhor essa explicação:</p>\n<p><img class="g-image g-image--lazy g-image--loading" src="data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 800 600\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-10\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-10)\' width=\'800\' height=\'600\' xlink:href=\'data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAYAAAChS3wfAAAACXBIWXMAAAsTAAALEwEAmpwYAAAPsUlEQVRo3s1aCXiNVxqOxFYatSXETG1JZQRBEkIR00VpdYxSOkOprbZo%2bzwzQ0UsFSJIhRprk1pDRFBLKNOhsQ1SlWCE2iIhoQTZI7n3P%2b%2bc79x7bv773//eSCeZZ/7nOTn33/Kf7z3f8n7fOU5QH4yV94rCm7G8McX6/q84GH%2bPmd81Go2W3/K8uLjY6nm6ptA4zO9Wx%2bFkEUh%2bQAhr52M0GKbA5p1KAECHwWCwXNu1axeGDh2KTp06oVu3bvD19cWkSZNw6tQpKyCqCwQnKyEUY/lgs6%2bCnd8DnI2DcmE/jL/cBt1VzM8xOaDnHJRW%2bNu3b6Nv375wcnJCixYtsGLFCqxcuRIzZ84U16iNGzcOz549q1YQnIRaqoW6fw1sy1Sw%2bd2AOb5gszsBYV2BL/sA%2b%2bcA%2bQ%2bsnq%2bMFkghrl%2b/jkaNGlkEbdasGdavX4%2bkpCTMmjULNWvWtNzr3bs3SktLzQqoVL0GCKHNM2%2b8lQzDgldhmNUBhvmBMIT1BBa%2bip%2bmdsaO4V44PKwFHoT1A55kmDVBeS6foLZ9EsLPzw8uLi7o0KED2rdvj9atW4trb731lrjWtm1bcZ1%2bEwiTJ0/W9RtVZAJmJ1OQA6x8B1gUwGe7L7C0l6ktfhXj/Nww0LshBnd0x4xursCmsTByVWZaRymdpY6PkKpPak4znp%2bfj40bN2LhwoWIiorCokWLEBISgoiICHEeFhaGvXv34vTp06hVqxYuXLhgpUVVpwFGg0mVj0djhn999PVshHfaNcSAV14Sfd/Wrpje2wMR/V7GsA6NMca/OTC3E1jaMTD7U27V06xJ9e3Rowc6duwofnft2tWi6tTatWtndf7ee%2b%2bhrKwMzs7OAhytA61aH7A1GAFNa1gNQLY%2brVzRrkld8XtKoAcQ3hWG%2bM%2bFv0AGn5nMVN4uAunngbxfbMxCCp%2bXl4cmTZqgS5cu4pyAaMPVPzExEW%2b//Y4AavSoUejcubP41uDBg3H//n3hE958881qAkD6gA3j8MbLdcSHa7vUgHMNJ9R0NgHyepsGotXh14O7NxMO0TCnC9gsHyC0o6mRs5zpDcR%2bamMCEoCcnBzUr19fzPyVK1eErY8fP17cO3jwoOjPnjsn%2bjZt2gih7969K0ygV69e1a8Bge7OQmAXLnwtl3JtGOrTGKvfbY13uUl84OsGzO8CZftfwG7xwV5LMrXbycC6EaamMQW1BjRu3NiiAZ6enhg2bBiOHTsmIsDx48dx5MgRfP/99%2bJeUFAQnj59Ws0aoPIBB4Z6YPUfvTCqc1Nh%2b5/2aI5NQzwxKcAdQ9o3Qufm9TCiC9eAMF8Y9XzAts%2bAtX%2b2AUDtA3r27Cm8Ox1TpkwRZtCnTx%2b4uroKsFu1aiUEp%2bvh4eHiXboeGhqqD4Da36jbc4ZoVRR4DKx6lwvnh8SPOmDje544M5EPNKoPksb5YOXA1lg56BVcm%2bQpooDCgbPQZWOZ6b9tCdYFQD3wtWvXCoFIOIoAc%2bfOFZ5/wYIFwkGuXr1aXJs3bx6WLl0qQiA9f/HiResoYCU4H4ccD1NFJi04FfKAm%2bdg5DwA8zubQ2BvlIXx8yWcBEXy8wW%2bwFcDoTxMN/1fyQNkvzXYrgaoeQCZgNbRBgYGIiEhAS%2b88ILNvalTp1rzAKucpYKwqDim7hYqLEFg2ddg3DQFhi%2b6wxjiIxybkYgREaT4mVCe3rc8z9SJUwUAqGfvxo0bgv6ScHXq1BGNfpOzo55AkL/feOMNfSYoQFVMY3iaBeOJjSjbOQuGuOkw7F0AdvlIOVtVjHZNwskmEZJHVhpwYS%2bQnACkJgKPbtvmDPLdCgDQywVu3bolbF0v7Mo2duwYlJQUm8EzmIU2q7z8Jh%2bfEs419AsehSK4c43gtD2ca/AczlXWj%2bSh547tmB1ng4p958F0ssFKAKCXDcbHx2PEiBEWEkTh79NPPsGJEyfKcwip8eqh0B%2berAktDQ9E/J9/h9F%2bzQRPmdazBe7O6CZAUKIGguU/NGurYicd1oIghSLUhXMx2NYDtM9WAgDqtZQ2PT1dAEBU2SJ4UR6UkkKgtAiMN%2brxjJ8beIaYmw22tB/YF/7A8r74O3fSS/u3xLb3vRAS1AKXp3F/teI1GD7n3CQxwm6q7/RfB1I7ADAdocmG1YJnZ2fj2rWfRayn9JgAWB61TNx7lrgULJInXssGgH35lmigFkl9f7Alr3On3AMl87rj/OSOAgASOnuGHw6O8sa6QW2QOZ2D84Uf2OrhYGUlDkygmgCQNqtNY4nebtkci%2b3bduDbPfsQvyMBq/6%2bRgDwZWSkeKYsehwYz0TZoaXAgfDytn8hcCgSxo08Q4wIxKHRv9P1H/VrO6OfV0MY5vrxDGwwWHHe/w4ApnF8dDx48AvS0q7yrC4Fa9es55HgptW/uXMnAyNHfIj169aJ89KYCWDRH5Vrk%2bazhnvcSS8ORNxwk%2b/wcK2FV3i%2b0vKl2iJvqVfLGd5u9VES0knQfMb0Q2GVA8CkBpjDFB2HvzvCU9/Noo/duh2ZmZlWNT%2bpIZcuXcbO%2bATT/4qdDMZptRgusVVN2q3QjS0fI21iWwR5NsGWoZ64GNwJx8f74FKwL0Z1ccOnr/6G5yjtwc7vtg6HjgCQditVl9JRauS51QVKpuMEmQoA6blPnTzNhdqlWx2SAJR/z4jo9TGI3bEHKeH8/8R8VK5JVqU78/ce3RHEDPM4Yw3vwU2Ck7bFvUz9QooC7YXJMG3UsgeAIy%2btV6BkmjDIYj8BeOwVZ4w/V1aEmOhvUFRUZLLrsrIKq0ZFhYU8A8zCjrh47FsxTxV0NDUG82wSMTPuDBFcwMjt3Ti3K5R5/lCW/wHG07G25mgPAKaTuBBZWbVqlajWbNq0Cbm5ufogSNXaOg1sels%2bC0EwRA5A/Ozx3MHttIr9u3fvFkzw22%2b/xfLly7Fz505kZGTo1vx2JOxDSspF63tm0K3qmNSeZgPXT4GlHQUyUnjYLLZyxPaZoGYG5Ie%2b%2buorC0WVrXnz5jh69KhlNqX9kurSW8q141D2c099cBG2z52MpDM/WQ2%2bpKRE5PWU2U2cOFFUfKgecPbsWZVPKNe%2bO5wb7ErYrUuDy3mIihXa5AHGCjNDKxOQsxQbG2sRmoDYvn071nHvTClrjRo1uDdPc%2bgXb2U9wo7dByyczWAWiDI6qv5u3rxZ1PyoLrh//wFcvnzZDEC5IDn5Bty9l23xHzYVYS0ZY9qFnOdLi21MgGbWx8dHCP/aa68JskL9qFGjRNWWrtNvWeAoKCiwtDxuIsayUpw%2beVK0Ym7yBUWlWgJra/%2bq7xfwl66k56KAz8Uxrm1JPxyvtpK4FQBS7W7evCmE7N%2b/vzinnJzO9%2b3bJ/J3mcE1bNhQ1Pa1ja43btxEOD86Um88wd2HhbiXU4KcvGcaIBhKywyWWUq/n4%2bUW/nI%2bKUQyeeSEROzweI47ZXDtb5LHVWeZyHFBgByfCQkOT46KFGh80OHDolyNf12c3PDhAkT8PHHH9s0uk5FjEXhi3GSJzT5xQakpOfjws8PcfVuETePfBTyWc4teIYbWUW4dKcYVzKLueAFyHqi4PKlS9gQ8w327NlriR7a2dcKqA7RanNWryNYhe6KTIAWKqilpKSICg6t1yUnJ2P69OnmNHXsc/AjBYmJh7E1eh12rY1EzJpV3KazkPWUcaGLcDWrFKlpmRzYIzh3/t/4%2bXo6J0rfcR8Rjdy8PJuKsp4g2lBNRVei2YU8lKon1hEIuk5ww4YNFidIa3UUrqhkRfV5upaammoBSxIabRM8gB/FJ7aiKLQrj0z/QvTGWHyXmIgfk38Uwm7ZtBn//OdRHOUtalkUGjRoKAqi8n9rB64nPAFEjpXWGVu2bAkPDw94eXlZiq32gKwwDC5ZskR4fHUYJBuX5Wt7i5WWQXP6Kv5T8g6ekfGsrPAhyviti6kXkZR0XOQERUXly%2bEkuDQ19cwxnaKK/DZRaqojOiqqfPbZZ7r%2bwiERkr%2bvXr2KZcuWYc6cOYiOjsajR4/0iZAeqzOatImdjRM5u5KTqWsqstz1HdcIGjD19pbA1BP0%2bPFjMdP0Dk2UdrKktlIjziG1QDvmX02FdT2sOvZKAM5sB%2bPUFDkZwvdTNVntraXZaQGg61rVVz9PfoieHz16tCBW5HinTZuG4OBg0dMeA6osjxw5Ujy3Z88e3bK6k6OwQsLSC7LpJkP22JnBzPtpjwEBUPi4HBgVQdECcPjwYbtxX36TQnW9evXE80TaiKfQipO7uzuaNm0qeiqsDhgwAHFxcZbiqt7YnaqETaiEt1SXqeU%2bANs7n2uAH5Qfd4EVPlEVSxSrGSHB1RpApqF1rHKzhNpJr1mzBt7e3rr2T9FLrkO8%2bOKLuHfvng24VQeAOt/O44LHzwAW0VoCT0vDewJhXAuWvA72jxXlCykcBAkALZDSQGlmaQZpEVWv0QzL2af29ddfi1Uk6QvUPe05oPtiuc/FRUW5jVVcEFEvQJCtR70DhPogf3YA7s3wR9YMP9z/PABl8wKAEG8wWkEym4hiBi0rK0ssgHz44Yd2G5Ey2jYTEBBgpQE002rHJ3t6jnIYCYDMYapVA1j0GFGOfjy7B8b7uyPq7VaiYDmjTwtE9GvJuXUQlM/bibqeBK6yuz5oAVUCQM6NBPvhhx9w5swZkVlSTxyAtuJQ%2bi33Icl0vmoBUNcD0o5BoaXyxb1x929%2bGOD1kqjOxgxui7/18sCkbu6iWqPM787Nozfw5J7FH8iKsaMmzYWYXoMGDYSHVx9UXSahqVcf5AyHDBmiu82magE4EA5GAHDbfzIrQBQo3evXRKuGtUWRcoK/m9hyI9YfZ/PnUg%2bUFzZ0Qp6jMEjslOoTFA7ff/99sdVu0KBBGDhwoOjp/IMPPsDw4cPFhotLPMfQ4xdVWxSN%2bwsU2ijBAcgJ8YdX4zrwbloX7d3qooVrLRUAPU0bKk5usl2Se47NVlKFx4wZ45AFyrZt2zariFN9GpAQYgHgaWgAGtV1QS3nGhwA04rvmK4aADhLrCwAWgGIqaq33KkbRQfadOGIulctAP/aato2E9EbuRyABnVc8HKD2pjz%2b9%2bYNj76mQGg7XecG%2bDOhUoBYI%2byU3yneE%2bpOBVriP%2bTc5Q02xF7raIoYDaB3PtQIvry2N8dT0K7o25Na37%2bp05NgMggGEP57H8zVncNsbIgVLRlpqK8xakqQ6A4Pb%2bbq3cHFM32x8D2TdHtt64IavMSfD1exJIBbTg4nBWSCWSlVXr2HW2%2bVFN2vWJIhRWh/wIB1aKDOVegPQUU5jgZUmb7gs3tYvINoR24%2b34XLP0nh2v2/8ujaomQajmMPc4EO7ZWrBVgwwQeIf5qSo1L8v9vhKfjP%2bzi4OnfrrWBAAAAAElFTkSuQmCC\' /%3e%3c/svg%3e" width="800" alt="API cloud" data-srcset="/assets/static/api-cloud.82a2fbd.dd5c100.png 480w, /assets/static/api-cloud.775f9c8.dd5c100.png 800w" data-sizes="(max-width: 800px) 100vw, 800px" data-src="/assets/static/api-cloud.775f9c8.dd5c100.png"><noscript><img class="g-image g-image--lazy g-image--loaded" src="/assets/static/api-cloud.775f9c8.dd5c100.png" width="800" alt="API cloud"></noscript></p>\n<h2 id="tópicos"><a href="#t%C3%B3picos" aria-hidden="true"><span class="icon icon-link"></span></a>Tópicos</h2>\n<p>Aqui vamos falar um pouco sobre o desenvolvimento de API\'s. Vou citar aqui alguns dos tópicos que quero comentar:</p>\n<ul>\n<li>REST</li>\n<li>Padrões de Respostas (JSON, XML...)</li>\n<li>Error Handling e HTTP status codes</li>\n<li>Autenticação (OAuth2, token...)</li>\n<li>Paginação</li>\n<li>Versionamento</li>\n<li>Tarefas em Background (Queue Jobs)</li>\n<li>Push Notifications</li>\n<li>NoSQL (armazenamento mais rápido)</li>\n<li>Filtros e Validações</li>\n<li>Documentação</li>\n</ul>\n<p>É um caminho longo e alguns desses tópicos eu ainda estou estudando, como o NoSQL, por exemplo, mas vamos em frente!</p>\n<p>Vejo vocês no próximo post!</p>\n'}},{node:{title:"Integração Contínua - parte 2",path:"/blog/integracao-continua-parte-2",date:"15. May 2013",timeToRead:3,description:"Integração Contínua - parte 2",coverImage:{type:"image",mimeType:"image/jpeg",src:"/assets/static/phpci-all-builds-dashboard-banner.07cc2b7.266b83e.jpg",size:{width:860,height:252},sizes:"(max-width: 860px) 100vw, 860px",srcset:["/assets/static/phpci-all-builds-dashboard-banner.a67b0b2.266b83e.jpg 480w","/assets/static/phpci-all-builds-dashboard-banner.07cc2b7.266b83e.jpg 860w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 252' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-31'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-31)' width='860' height='252' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAATAEADASIAAhEBAxEB/8QAGgABAAIDAQAAAAAAAAAAAAAAAAYHAgQFA//EADYQAAECBQAFCQYHAAAAAAAAAAECAwAEBhESBQcTITEIFjJBUVZhcZUVFyIkMzQlQlJjobHB/8QAGAEBAAMBAAAAAAAAAAAAAAAAAwACBAH/xAAjEQACAQMDBAMAAAAAAAAAAAAAAQIDEqEEEVETMjORMWFx/9oADAMBAAIRAxEAPwCc0jL1jV9KyWkZip55Lc4DkhEiwpKcVEccgersjty9PVoyylpqqtKIbQn4U%2bzpbt4dOM9SoR7t9B5FV9m5wO76q4sQCwte/iYepJxk9kvSCgrordv2yDS9NVm63kuuZ1k3tivRrF/4JEevNWse/wDM%2bmNRJn3SicfSlZAyvYGNdpzBxQQsjJVyARvMD1nxhEtXDycHmrWPf%2bZ9MahzVrHv/M%2bmNRIH154ZqJsq4ueuCl3mErKjmEkA33xOu%2bMIlv08kcdpCrnLZ17Mm3D8NaH%2bxEtZztZUPTqNKN1k/OKXMIY2apFpA3gm99/ZFoMrKVulKiMlXNj1xWvKJWper9nIk/Ptf0vxhaNS%2baTWEVqRti2t8kp1Estr1W6EUtCVKxcFyP3FRYGyR%2bkQhFave/0Sl2I4U398/vPSjXF9pxPHthCBNa%2bEZL/L5wP1B5QhHCwb4q84rPlBKKqAbvb79rq8FwhDafyIz6vxs//Z' /%3e%3c/svg%3e"},content:'<p>Olá! Olha aqui mais uma vez. Bom, antes de começar a falar aqui, preciso esclarecer algumas coisas. Primeiro, essa não é uma série de posts sequenciais, embora o título "parte1, parte2,..." possa sugerir isso. É apenas uma série sobre integração contínua. Na <a href="/2013/05/15/integracao-continua-parte-1/">parte 1</a> vimos uma introdução básica sobre integração contínua. Agora, vamos aplicar em um pequeno projeto meu para testes, o <a href="https://github.com/tonyzrp/mytwitter-laravel4" target="_blank" rel="nofollow noopener noreferrer">MyTwitter - Laravel</a>.</p>\n<p>Nesse projeto, tenho alguns testes automatizados já configurados e rodando localmente, como podemos ver aqui:</p>\n<p><img class="g-image g-image--lazy g-image--loading" src="data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 651 254\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-5\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-5)\' width=\'651\' height=\'254\' xlink:href=\'data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAZAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAAAwYAAQIEB//EAC4QAAEDAwMBBQgDAAAAAAAAAAECAxEABAUSEyExBhRBUaEVIlZxgZGU0ULB4f/EABcBAAMBAAAAAAAAAAAAAAAAAAECAwD/xAAkEQABAgMJAQEAAAAAAAAAAAABAAIRkdEDExQhMUFRYZIEEv/aAAwDAQACEQMRAD8A8C7zatNgMW92FEAKUptQJIMjofD%2bq4txxQXreu9wp5TsdYIIn6z6VenKIVpnIhSgCBqV7wBgePPJ9awWMw2UlSL9BWQ0CSsTP8f8qMArnPMo5cCQQi6vveMwbYckD51SilxkhVzfnUI092EHjzmudTOWaWhCkXragTpBKhBiTH0FR9eUtmWlvOXjbS5DZLigD5xz8qaKX8N4Q3Hr4jQovlJ6SiJ9K13jIqQES%2bURAG34dfKgG7uVadVw%2bdJkS4rg%2bY5q%2b/Xkz3q5mIndV0%2b9KYHVMBDRC2HpA2nJPhoNDroVeXa1lS7m4UoiCS6okj70CKyKa7t3D2eym5xFtLrKHklq5UvhRPWOh4PFAVksCJCcM30EHdWJ559KWRV1HDsjqZmqmbJvcymUZDAkc4loQem45zWl5Ps%2bEnTg21K8BvOCaWKlE2DDzN1UtyOTNM6sn2fCSU4Rsny3nBWjkuzmkEYZBV5brlK1SlPzMO59GqIsWjczKYPa%2bG%2bHWfyl/qp7Xw3w6z%2bUv9Uv1K2GZ36dVG6b3M1X/9k=\' /%3e%3c/svg%3e" width="651" alt="Testes automatizados locais" data-srcset="/assets/static/testes-locais-mytwitter-laravel4.82a2fbd.dfee698.jpg 480w, /assets/static/testes-locais-mytwitter-laravel4.28c6e99.dfee698.jpg 651w" data-sizes="(max-width: 651px) 100vw, 651px" data-src="/assets/static/testes-locais-mytwitter-laravel4.28c6e99.dfee698.jpg"><noscript><img class="g-image g-image--lazy g-image--loaded" src="/assets/static/testes-locais-mytwitter-laravel4.28c6e99.dfee698.jpg" width="651" alt="Testes automatizados locais"></noscript></p>\n<p>Esse projeto já está integrado com o <a href="http://about.travis-ci.org/docs/" target="_blank" rel="nofollow noopener noreferrer">Travis-CI</a>, que é um serviço de integração contínua para projetos <em>open source</em>. Porém, vou aproveitar esse post para testar uma ferramenta nova, o <a href="http://www.phptesting.org/" target="_blank" rel="nofollow noopener noreferrer">PHPCI</a>, que parece ser bem interessante. Se quiser saber mais sobre <a href="https://github.com/Block8/PHPCI#what-it-does" target="_blank" rel="nofollow noopener noreferrer">o que ele faz</a>, <a href="https://github.com/Block8/PHPCI#pre-requisites" target="_blank" rel="nofollow noopener noreferrer">quais os requisitos</a>, etc.. basta acessar o <a href="https://github.com/Block8/PHPCI" target="_blank" rel="nofollow noopener noreferrer">repositório deles</a> no GitHub.</p>\n<h2 id="mãos-na-massa"><a href="#m%C3%A3os-na-massa" aria-hidden="true"><span class="icon icon-link"></span></a>Mãos na massa</h2>\n<p>Bom, primeiramente vamos seguir o passo a passo para instalação:</p>\n<ul>\n<li>clonar o repositório <code>git clone <a href="https://github.com/Block8/PHPCI.git" target="_blank" rel="nofollow noopener noreferrer">https://github.com/Block8/PHPCI.git</a></code></li>\n<li>instalamos as dependências via composer: <code>composer install</code></li>\n<li>permissão de execução no bin console dentro do projeto: <code>chmod +x ./console</code></li>\n<li>criar o arquivo config.php: <code>echo "&#x3C;?php" > config.php</code></li>\n<li>instalação do PHPCI: <code>./console phpci:install</code></li>\n</ul>\n<p>Após esses passos, o console pedirá algumas informações para a configuração do PHPCI com o MySQL.</p>\n<p>Depois disso, siga adiante:</p>\n<ul>\n<li>crie um VirtualHost apontando para o diretório clonado, lembre de permitir a reescrita de configurações: <code>AllowOverride All</code></li>\n<li>crie um arquivo .htaccess no diretório clonado com o seguinte conteúdo</li>\n</ul>\n<pre class="language-bash"><span class="token operator">&lt;</span>IfModule rewrite.c<span class="token operator">></span>\n    RewriteEngide On\n    RewriteCond %<span class="token punctuation">{</span>REQUEST_FILENAME<span class="token punctuation">}</span> <span class="token operator">!</span>-d\n    RewriteCond %<span class="token punctuation">{</span>REQUEST_FILENAME<span class="token punctuation">}</span> <span class="token operator">!</span>-f\n    RewriteRule ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ index.php <span class="token punctuation">[</span>QSA,L<span class="token punctuation">]</span>\n<span class="token operator">&lt;</span>/IfModule<span class="token operator">></span></pre>\n<p>Na documentação, eles dizem para criar um cronjob para sempre executar os builds, mas vamos fazer isso manualmente.</p>\n<p>Após essas configurações do PHPCI, você consegue acessar a página no browser, essa deve ser a home:</p>\n<p><img class="g-image g-image--lazy g-image--loading" src="data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 1366 768\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-13\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-13)\' width=\'1366\' height=\'768\' xlink:href=\'data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAGwABAQEAAgMAAAAAAAAAAAAAAAcGAQQCAwX/xAAyEAABAgUBBAkDBQEAAAAAAAABAAIDBAUGEQcSITHRExQVFhhWYXGUCCJRNEFSdIGV/8QAGAEBAQEBAQAAAAAAAAAAAAAAAAIBAwT/xAAgEQACAgICAwEBAAAAAAAAAAAAAgEDERNRYSEzcTFB/9oADAMBAAIRAxEAPwDV2ZQLTnrfEWrxZCHMufhzI062G7Z2WgfaSfdfVlrX07iR4sN0SQ2mHBLp5rGn1BO4/wCKfacUySq%2bqEaXqMtCjwezy/ZfDbF3hrMHDwRlXWTsS2IYJiUSnRwRgCJIwW49ftaFetViMz%2bk7JaZxBlO6GnmQekpWSd47VZgILQ08Bz0lK48O1WYWzfZlpMDS626QA7O/qcPkuGWZargSbXpbd%2bN8lD3%2bqYTsZfoyLbQ04OC6NSmn8CpMIXIs7TbP6imf9JnNa1tmWqXOBtelgDgTJQ8H2TuZavSbPdel4xna6lDx7JivsZfoycO1dOJUhzZmnH9iO0WHPvvXvmKBYExCfDhxLehB4IL2x2B4B/i7aGCN29aZ1mWqHtAtilkHiRJQ8D33Kfa8W1QaZp7HmaZRafKTAmYLelgyzWOwXHIyAqVEeYXySzOsZI/bd7G3bwfXJOVE5tS3V9iK4w%2bLWg8M8NnHst2PqBnwMC3pP5L%2bSib3NcGbAIAYGnP5XivbVWr1qzR/DyWOyOyrPjJcW/ULUWjAt%2bTx/ZfyXPiHqXl%2bS%2bQ/koaivRXwRufkuXiHqXl%2bS%2bQ/kniHqXl%2bS%2bQ/koaiaK%2bBufkuXiHqXl%2bS%2bQ/ks3qBq5OXlbr6TMUmXlWOisi9JDjOcQWnOMEKYotilFnMQZNrzGJk7VThQ4M45kJgYwMhnAJO8saTx9SV1URZR61%2bG3exvoREXU5BERAEREB/9k=\' /%3e%3c/svg%3e" width="1366" alt="Home do PHPCI" data-srcset="/assets/static/phpci-home.82a2fbd.789bc0e.jpg 480w, /assets/static/phpci-home.cbab2cf.789bc0e.jpg 1024w" data-sizes="(max-width: 1366px) 100vw, 1366px" data-src="/assets/static/phpci-home.cbab2cf.789bc0e.jpg"><noscript><img class="g-image g-image--lazy g-image--loaded" src="/assets/static/phpci-home.cbab2cf.789bc0e.jpg" width="1366" alt="Home do PHPCI"></noscript></p>\n<h2 id="criando-um-projeto"><a href="#criando-um-projeto" aria-hidden="true"><span class="icon icon-link"></span></a>Criando um projeto</h2>\n<p>Após isso, selecionamos a opção "add project" no menu superior. Ele pede algumas configurações do repositório como: URL, nome do projeto, tipo do fonte (GitHub, Bitbucket ou local).</p>\n<p>Após adicionar o repositório, você é redirecionado para a tela do projeto no PHPCI. Antes de fazer o build, precisamos criar o arquivo de configuração do <em>build</em>, o <em>_config.yml</em> com o seguinte conteúdo:</p>\n<pre class="language-yml">build_settings:\n    ignore:\n        - "vendor"\n        - "tests"\n\nsetup:\n    composer:\n        action: "install --dev"\n\ntest:\n    php_mess_detector:\n        allow_failures: true\n    php_code_sniffer:\n        standard: "PSR0"\n    php_cpd:\n        allow_failures: true</pre>\n<p>Após adicionar o arquivo ao repositório, estamos prontos para fazer o primeiro build.</p>\n<h2 id="primeiro-build"><a href="#primeiro-build" aria-hidden="true"><span class="icon icon-link"></span></a>Primeiro Build</h2>\n<p>Para tal, o botão "build now" vai nos ajudar nessa primeira vez. Ao clicar nele, somos direcionados para a tela de visualização do build. Como você deve ter percebido, nada acontece. Isso ocorre porque não ativamos aquela <em>cron</em> que eles falam. Por isso, precisamos rodar as builds manualmente, assim:</p>\n<pre class="language-bash">/path/to/phpci/console phpci:run-builds</pre>\n<p>No melhor dos mundos, esse build deveria funcionar! Porém, meu projeto não está tão bom assim, visto que o build falhou, como podemos ver:</p>\n<p><img class="g-image g-image--lazy g-image--loading" src="data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 1366 768\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-17\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-17)\' width=\'1366\' height=\'768\' xlink:href=\'data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAcCAwEGCAQF/8QAPxAAAQIDBQMFCg8AAAAAAAAAAQIDAAQRBQYSITETQVEHCBUicRQWJTJSYXWBkbEjJDQ2U2JylKGywcLh8PH/xAAXAQADAQAAAAAAAAAAAAAAAAAAAQID/8QAIBEAAwACAQQDAAAAAAAAAAAAAAECAxIyESIxcSFBYf/aAAwDAQACEQMRAD8A26493Lr2nYIctJUmJtS%2bs2ucCFYcKQOqSaDf64%2bzLXLuM846nZyySg0OOZwJPnSTr6o0zkdQh3lLtTHtUjotGbKyFatjXWH8JdpxpKAuZRhJNQ4Qo14nfDcKUhb7Ni97xLi1B2UjUnMdIJoPwgFw7jA12Ujrp0gmnuhgTEuhtIIcmTjOL5RhpThXdn7oslWVMhRDT68X0roXTshdpXRi/TcS4RoVNyKTwE8kiMi4VwK%2bLJ/fUwww7VWEMpxcMSa%2byJFSgKmXoO1MHaHShdN3KuDKqSoCWO4juwKr20i6duvcdxhaAiw2Er6pXtEheemFWIUVWlI35DmPxGUq%2bypJhY84SpudZuJrB4Wl9aHyoqIm61It1M7Gg8hs%2bxN8oNqTKXFho2YE4ijPJTYpSvmprpHQ8vNSy2qh8EDWooR2xzZzdGBPXxnmW1bPwaRVQrmHEcCI6QasUNNlCHQK6kgn9YdttS/xDxzKdfP2y59KHkslLSHkZ9YqpTsyNYkVNNiikAD6yokloSzDTalg0rnpWKnSF5JJy4f5EFNEfipWVhCQo7woCLC6woEFCKHI5iKwg8VcP7lEtkryj7f4gEYa7mQfg20gncFDOFtzhFJ7z7OSEYVdKyx/NDLDVDXGqFjzg/mrZ/pOW9641w80Z5eDNI5uTTbPKRaKGkhCBZgNAScyWidfOTHS8EEK/E%2bkOPNe2eK0llBbpvrFbSiWwTBBGZZKsFYIIACsK7nCmtz7P9KS/wC6CCNcPNGeXgz/2Q==\' /%3e%3c/svg%3e" width="1366" alt="PHPCI primeiro build falhou" data-srcset="/assets/static/phpci-primeiro-build-falho.82a2fbd.d07e0a0.jpg 480w, /assets/static/phpci-primeiro-build-falho.cbab2cf.d07e0a0.jpg 1024w" data-sizes="(max-width: 1366px) 100vw, 1366px" data-src="/assets/static/phpci-primeiro-build-falho.cbab2cf.d07e0a0.jpg"><noscript><img class="g-image g-image--lazy g-image--loaded" src="/assets/static/phpci-primeiro-build-falho.cbab2cf.d07e0a0.jpg" width="1366" alt="PHPCI primeiro build falhou"></noscript></p>\n<p>Após alguns ajustes no meu código, podemos ver o build funcionando:</p>\n<p><img class="g-image g-image--lazy g-image--loading" src="data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 1366 768\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-21\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-21)\' width=\'1366\' height=\'768\' xlink:href=\'data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAYCBwEDCAQF/8QANxAAAQMCBAIHBgQHAAAAAAAAAQIDEQAEBQYSIRMxBwgUIkFRYRUlUnGBkRYjodEmQlN1krLC/8QAFwEAAwEAAAAAAAAAAAAAAAAAAQIDAP/EACARAAMAAgEEAwAAAAAAAAAAAAABAgMRMhIhMXEiQVH/2gAMAwEAAhEDEQA/AG/I2W8r4ngQcxE2fayvvNruwhWkJSBKZMDx%2btfZtckZIeU6jgsJKDBK7jQPmkkb/SkvodQh3pLxTWHQPZiN2VkK5tjnM1f6bdpbPDCrlPe1TxCFffy9KLhSkDr6myvfwDkcpT%2bTZzO/vAftUvwHkeAOz2Ox59vH7U/P27bYB4tydY8bnTERyk1K2YLS1KCH1SI/Nf1j6CaX4m2xBTkHIZSdbdoknyvgYrfbZHyEwoq7Ph7siIdukqAp9DoK9IbRqH8utM/apFSgCSyAB4lSa25BtiBd5PyGXQ6lixYJGkpt7gJB%2bYFeK7yNkcpJ49kwlXdk3QBM8gDI3mKstDgXOhtCo%2bFSTVY9YSTk7DdTYT72tvI/FTxM3SkWrcrYgdBt%2bzd9IOKXKVuBo4aE6iiDspsRE%2bkc%2bVdEW1zbuNApemNtxuPnXNnVzYTfZyvmW1Fv3aQSd9w4jyIrpVGGaEgJWkbbwmJoZKpqe30gJNNpfrMXRbWhlXDbdb37ylQR8tjNCH2QmEtFX6mpPNdnZab1SRO%2b4rU1rKoDg5eRpUUMngayvgKCj4japqeaIILJg%2blZ0u/1B/jWQFzuvb0FEJBtLTZlFuoTVadYJaVZQw5Ib0EYtbH/AGqz9J%2bI/YVV/WCTGU8OJMn2pbD9VVXDzRPLwYj9XJptnpIxFDSQhAwwGASdyWiefqTXS9FFC/E%2bkGPNe2eLEVFJbjxmtTSpbBooqY5OaJoorGCaq/rCn%2bD8P/ulv/1RRVcPNE8vBn//2Q==\' /%3e%3c/svg%3e" width="1366" alt="Build funcionando!" data-srcset="/assets/static/phpci-last-build-success.82a2fbd.c9b576b.jpg 480w, /assets/static/phpci-last-build-success.cbab2cf.c9b576b.jpg 1024w" data-sizes="(max-width: 1366px) 100vw, 1366px" data-src="/assets/static/phpci-last-build-success.cbab2cf.c9b576b.jpg"><noscript><img class="g-image g-image--lazy g-image--loaded" src="/assets/static/phpci-last-build-success.cbab2cf.c9b576b.jpg" width="1366" alt="Build funcionando!"></noscript></p>\n<p>Como vocês devem ter percebido, tive alguns problemas com o PHPCS, pois o phpci executava essa linha de comando:</p>\n<pre class="language-bash">RUNNING PLUGIN: php_code_sniffer\n    Executing: /var/www/phpci/vendor/bin/phpcs --standard<span class="token operator">=</span>PSR0 --ignore<span class="token operator">=</span>vendor/*,tests/*,app/config/*,app/database/* /var/www/phpci/build/project1-build5/\n        ERROR: the <span class="token string">"PSR0"</span> coding standard is not installed. The installed coding standards are Zend, Squiz, PHPCS, PSR2, PEAR, PSR1 and MySource\nPLUGIN STATUS: FAILED</pre>\n<p>Só consegui fazer esse comando rodar dizendo para executar no diretório <code>./app/</code>, não no root.. e não consegui fazer isso usando o PHPCI, caso alguém consiga, compartilha ai.</p>\n<h2 id="conclusão"><a href="#conclus%C3%A3o" aria-hidden="true"><span class="icon icon-link"></span></a>Conclusão</h2>\n<p>Após uma longa batalha para passar no QA, a build finalmente funcionou! Nesse exemplo, cada build foi executada na mão. Poderiamos usar o <em>cronjob</em> que eles sugerem, mas preferi assim, pelo menos para esse exemplo. No <a href="http://about.travis-ci.org/docs/" target="_blank" rel="nofollow noopener noreferrer">Travis</a> o <em>build</em> é disparado através de um hook no github... ou seja, a cada commit na branch master (ou nas que você definir), ele faz um build novo automaticamente.</p>\n<p>Meu dashboard até o build funcionar:</p>\n<p><img class="g-image g-image--lazy g-image--loading" src="data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 1366 768\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-22\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-22)\' width=\'1366\' height=\'768\' xlink:href=\'data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAYBBAUHCAID/8QAPhAAAQIFAQMJAwgLAAAAAAAAAQIDAAQFBhEHEhMhFhciQVVhcZTRFDFRCBUjJYGCobEkJicyYmRydJGy4f/EABkBAAMBAQEAAAAAAAAAAAAAAAACAwEEBf/EACARAAIBBAMBAQEAAAAAAAAAAAECAAMRElETIUFhBCP/2gAMAwEAAhEDEQA/AGyy6Dac9QA7V3ZBuaUvCkPTqWzshKQOiSfGMnL2vp4466zvaeFJOCpU8lKfuqPvjX%2bnFNkarqg8xUpZp9gU4r2XG0u8QlABwoEZjd6bCttwJApkgCBx%2br5fJ7/3IfjVQLnyLyFieotcj9PNlP0tKznj9aoieSOnmANukcD7/nRENKbHtaWdSp%2bj01xK8gJVIsgA8PgkGParVs9LgSbcpIBGdr2NvH5RlqezMyb5FVNn6cFJ236Wkn4VNBxFiWtXTZhRVt0Z3Ixh2fbUB%2bMMblp2ehBVycpKsdQkm8/lEG1bQG7/AFbpXT/km%2bHj/wAg/nuGTfIuzVuacF3epcpDBI2SmXnkJB8QDFR60NP3s7uoUtsKGD%2bnIzjuO1wPXmG1NqWeXFI5OUkbIBz7E3x/CEHXW3bfp%2bnr8zSqPTpWYTMsp3jMslCgCriMgQyJTdgoMVnZRfqJmiU2mo6qOPSxUQqnOJSVjZOQlA%2bJ8PsjpZptwJwsp7ukI5Y0CWlV%2bHZCgBTnUnrOejHROwc8UuY7kGKFc1UnQk88GYAezK1TKEMf1H3Hwig6tW0MZ%2bzMW1S7j8sxuk52VEnJA%2bEeHKfMqIIbB%2b8I5mUXnWgRluRPitZ2DEFZ6EWVSEwUEbsf5EQZCY6P0Y4d4hcRHxpyulR3i/AQga9n9m01/dMf7eEbHEhMhajuxxx1iNefKAYcZ01mi4nAM0x1/wAXjFfzi1QSVcKENpz7TK/PWfX1T1AW3LzAZS2CpAWMKQkq4Kz7zDFz33x2hLeUb9III9KiimmpI8nnVXYO1j7DnvvjtCW8o36RPPhfHaEt5Rv0gginEmhE5H3DnwvjtGX8o36Qc%2bF8doy/lG/SCCDiTQhyPsw58L47Rl/KN%2bkYq5dTLmuqlqplZm2XZRS0uFKWEIOUnI4gQQQCmg7AmF2PRM//2Q==\' /%3e%3c/svg%3e" width="1366" alt="Dashboard do projeto!" data-srcset="/assets/static/phpci-all-builds-dashboard.82a2fbd.498dd1a.jpg 480w, /assets/static/phpci-all-builds-dashboard.cbab2cf.498dd1a.jpg 1024w" data-sizes="(max-width: 1366px) 100vw, 1366px" data-src="/assets/static/phpci-all-builds-dashboard.cbab2cf.498dd1a.jpg"><noscript><img class="g-image g-image--lazy g-image--loaded" src="/assets/static/phpci-all-builds-dashboard.cbab2cf.498dd1a.jpg" width="1366" alt="Dashboard do projeto!"></noscript></p>\n<p>Bom, acho que é isso, galera.</p>\n<p>Fiz alguma cagada? Deixa o comentário ai.</p>\n<p>Até a próxima!</p>\n'}},{node:{title:"Integração Contínua - parte 1",path:"/blog/integracao-continua-parte-1",date:"14. May 2013",timeToRead:2,description:"Integração Contínua - parte 1",coverImage:{type:"image",mimeType:"image/jpeg",src:"/assets/static/tempos-modernos.07cc2b7.0126ff1.jpg",size:{width:860,height:252},sizes:"(max-width: 860px) 100vw, 860px",srcset:["/assets/static/tempos-modernos.a67b0b2.0126ff1.jpg 480w","/assets/static/tempos-modernos.07cc2b7.0126ff1.jpg 860w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 252' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-32'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-32)' width='860' height='252' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAATAEADASIAAhEBAxEB/8QAGQAAAwEBAQAAAAAAAAAAAAAAAAUHBgQI/8QAKxAAAQMDAwMCBgMAAAAAAAAAAQIDBAUREgAGIQcxQRMUCBUiYXGBMlGR/8QAFAEBAAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AMBRul9RX09qO5nJcRqPFWs%2b2XcqUEKwUcuwNwbDzbxcaSM0tp5DU%2bTKTBiRHEerIcAIRfwE91q4uEjnTuvVzazEqZFfc3A2W3VuO0ZpxbUR%2bQnAhYSpOTaVqUsgWuMQTbKww77NV3hVW2mc/apX6cVlxaQG0qVZKTawyPAJtcnvoO7cdUY3hXozVDp7y5YQW1yHFBCpNuyii%2bLYA%2b5%2b51r9mdJ361K9vU67ToL6r4x2byHlW7mwskD9nTXbWyIO3mIyKjEmTatKGTcKOyQ8lspUhYWFW9JSFYqCzcEdhzfXbL37t%2bjPt5PUlqoxXQ7jH9xJWlQSlC05pCUAqCADa6QbnzoEFU6WQ0SKsy3uRkyIClNID7OKF4i5Jso4908/c8ccIahX0/Lm36xE9CDGSlmPSmFYpccA5yPcIHe/cn9nVbq24IKq%2blNIjxZtSqR99EMYqaeWl5vH1QVJLSykItyfpKTwTfSHdNLh1OTIkUeityZFOacWuC7GcacQpa0pZbCUk%2bo6FqKyQMSLcgaCU7hqMetUtLsJkReLBq1rpv8Abjgj9j8aUQKm3HcQUtNuhJ/isAg61W1Nuy6lNSl6IFVJ94xI0N3%2bLWBAKli/cE2APnIntqvP9Epi4heZq0CRKCeYz0VIaWfICrC3%2bD8jQR/qrT40frBXIiErUx7lNw44pxRyxJ%2bpRJ8nzrU9I40cdTaPT1R2HIUpmUHmXW0rSvFClJuFA9ilJH40aNBS9oS5CYVPqQec99NIkyXiolTzhkqRdX9jEABPYeANeYeoEVmFvrcUWK2G47NQfbbQOyUhw2GjRoKZ8N9cqTteNIcmOrpsZl2UzHUbpbdCFEKHkc827X1bqs2mJWqfMjXbltyozaXgTlg4F5pv5SbDg8Dxa50aNBjp8CHQ/iS%2bXUiKzDgttNYtMoCRcx1kk/2SSSSeTq35EQ02PZ2w/wB0aNB//9k=' /%3e%3c/svg%3e"},content:'<p>Olá, senhoras e senhores. Hoje vou falar de Integração Contínua! Tenho tentado estudar esse assunto, gostaria de ter um pouco mais de tempo pra isso, mas vamos que vamos!</p>\n<p>Bom, segundo <a href="http://martinfowler.com/articles/continuousIntegration.html" target="_blank" rel="nofollow noopener noreferrer">Martin Fowler</a>:</p>\n<blockquote>\n<p>Integração contínua é uma prática de desevolvimento de <em>software</em> em que os membros de um time frequentemente integram seus trabalhos (...)</p>\n</blockquote>\n<p>Em outras palavras, é uma prática para automatizar e otimizar a integração do código de uma equipe.</p>\n<h2 id="um-exemplo-vale-mais"><a href="#um-exemplo-vale-mais" aria-hidden="true"><span class="icon icon-link"></span></a>Um exemplo vale mais</h2>\n<p>Acredito que a melhor forma de explicar o que é integração contínua é com um exemplo. Para tal, usarei uma versão simplificada do exemplo do próprio <a href="http://martinfowler.com/articles/continuousIntegration.html" target="_blank" rel="nofollow noopener noreferrer">Martin Fowler</a>. Vamos a ele, então.</p>\n<p>Digamos que eu esteja trabalhando em um projeto com uma equipe de desenvolvedores. Para completar minha tarefa, eu baixo a versão mais recente do repositório desse <em>software</em>.</p>\n<p>Altero alguns códigos de produção, sempre guiados por testes para garantir que tudo está funcionando. Temos aqui um ponto interessante, ao meu ver, não há integração contínua sem testes automatizados.</p>\n<p>Ao termino do meu trabalho, eu me certifico de que a aplicação está funcionando localmente, fazendo um <em>build</em> automatizado local e executando todos os testes. Só consideramos como <strong>sucesso</strong> se todos os testes passarem.</p>\n<p>Uma vez que os testes passaram, ai sim eu posso pensar em mandar as minhas alterações para o repositório. O lance é que, assim como eu estava desenvolvendo minhas tasks, outros desenvolvedores também estavam. Antes de mandar meu código, eu atualizo o código local com o repositório. Em caso de conflito, é minha responsabilidade resolve-los!</p>\n<p>Sem conflitos e com os testes passando, agora eu mando o código para o repositório. Meu trabalho está terminado, correto?! Não! Agora, uma nova build será feita automaticamente, pois há sempre a possibilidade de ter diferenças entre o meu ambiente local e o ambiente de <em>staging/produção</em> (esse problema pode ser minizado ou até mesmo removido usando <a href="http://www.vagrantup.com/" target="_blank" rel="nofollow noopener noreferrer">Vagrant</a>, por exemplo). Só quando as minhas alterações são integradas com sucesso ao <em>software</em> (aplicação é construída, todos os testes são executados, etc, etc) é que posso dizer que meu trabalho está terminado.</p>\n<p>Quando um <em>build</em> falha, o mesmo deve ser rapidamente corrigido!</p>\n<h2 id="conclusão"><a href="#conclus%C3%A3o" aria-hidden="true"><span class="icon icon-link"></span></a>Conclusão</h2>\n<p>O resultado de todo esse trabalho, é que a equipe passa menos tempo procurando erros e mais tempo em novos desafios (erro não é desafio, se é que me entendem).</p>\n<p>Embora seja um conceito muito foda, as empresas parecem não ligar muito para isso. Alguns até dizem que "o importante é funcionar" ou "não quero código limpo, quero funcionalidade", o que acho ridículo e imaturo, profissionalmente falando.</p>\n<p>Na verdade, nem mesmo testes automatizados se encontra fácil por ai. Vejam bem, não falo que a comunidade PHP não usa, e sim empresas de pequeno/médio porte. Muito pelo contrário, vemos que as empresas que realmente se importam com seus códigos estão fazendo um belo trabalho nesse sentido.</p>\n<p>Bem, fica aqui meu pensamento.</p>\n<p>Até a próxima!</p>\n'}}]}}}}}}]);