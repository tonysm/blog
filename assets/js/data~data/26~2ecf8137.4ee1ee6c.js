(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{276:function(s){s.exports={data:{tag:{title:"Camadas",belongsTo:{edges:[{node:{title:"Controllers e Mecanismos de transporte",path:"/blog/controllers-e-mecanismos-de-transporte",date:"21. February 2014",timeToRead:6,description:"Controllers e Mecanismos de transporte",coverImage:{type:"image",mimeType:"image/jpeg",src:"/assets/static/transport-doctor-who.07cc2b7.0b6d77d.jpg",size:{width:860,height:252},sizes:"(max-width: 860px) 100vw, 860px",srcset:["/assets/static/transport-doctor-who.a67b0b2.0b6d77d.jpg 480w","/assets/static/transport-doctor-who.07cc2b7.0b6d77d.jpg 860w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 252' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-59'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-59)' width='860' height='252' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAATAEADASIAAhEBAxEB/8QAGwAAAgIDAQAAAAAAAAAAAAAAAAcFBgIDBAj/xAAsEAABAwMDAwMCBwAAAAAAAAABAgMRAAQFBhIhMUFRBxNhFYEiIzIzgpGx/8QAGAEAAwEBAAAAAAAAAAAAAAAABAUGAQP/xAAhEQACAQMEAwEAAAAAAAAAAAABAgADBBESITFRMjNBwf/aAAwDAQACEQMRAD8Ap%2bm8y0t7bdWfvPLP7vSftTOsMSxeY8qbt1jcOW1Hj5FLDTxNpeMMXFuhZmQ4DEieoNejNH32DRaOM3L7YcCvxTBj4muScypaq1NNR3idGmbmHWmkFKm1qABMbvI/qqnqLAHH3ACE7ilEp8U6dVZW3buFLsC2ditq5E9e9KLWmonLYvkEFBEGEjmf8pxbcZnGuQUJxNvp1jsm9hcllLB9pp2xUrhYJWVBBUAB07HnzW/U2RdymHuF32aDt0pht1CPbALhJO5MyeRAP37Vl6P6htzaZlkpSgFaF7V87pBSaqGQvXXkoZJlFuFNIhIEJkmCe9ObCkrh9Rkvf0VARwO4s8kHHLhSlq71zNbtxHipjKte2pRKP1GQai0JWNyx07ipx1wxmjiNLD3DvvFQWQQpIBFTuFu7g3El5ZKneZPWiigklSx3EsGQWouvqkyptUnzHSlfrRRlaZMUUU3t/EzLn1mcfpw6v6jeJ3HaWQY/lWWTuHWlvBtZSAtUcfNFFFWrsoYg/P0SeuRmkue5F3H5loSvkioN7iI4oooCpBxP/9k=' /%3e%3c/svg%3e"},content:'<p>O trabalho de um Controller é pegar informações HTTP e passar para a aplicação (como um mecanismo de transporte), o que faz todo sentido, já que não queremos ter Controllers sabendo demais. Mas, acontece que não é tão simples organizar o código, é uma tarefa bastante complicada, na verdade. Comecei a usar o <strong><em>Repository Pattern</em></strong>, mas acabei acomplando meus Controllers a vários repositórios, o que acaba sendo custoso, visto que para cada request, vários repositórios são carregados..</p>\n<p>Mas não acho que seja papel do Controller interagir diretamente com models ou Repositórios, então, isso sempre me incomodou. Até que, assistindo a um vídeo do <a href="http://cleancoders.com" target="_blank" rel="nofollow noopener noreferrer">Uncle Bob</a> em que ele mensiona os Interactors, pensei "É isso! Faz todo sentido!".</p>\n<p>Quem nunca se pegou pensando "como faço para utilizar o método desse controller em outro lugar?". A resposta é: "Você não deve utilizar seus controllers em outros lugares!".</p>\n<p>Para quem não viu, aqui vai um resumo.</p>\n<h2 id="interactors"><a href="#interactors" aria-hidden="true"><span class="icon icon-link"></span></a>Interactors</h2>\n<p>Com os Interactors, o papel do seu controller é basicamente capturar qualquer informação do protocolo utilizado (HTTP) como, por exemplo, qual o usuário autenticado no sistema, qual o id do <em>resource</em> que foi passado e entregar essas informações como argumentos para os <em>interactors</em>, assim como tratar as <em>exceções</em> disparadas pelos mesmos e converter essas informações para a resposta do <em>client</em> (HTML, JSON ou, quem sabe, (uhh!) XML)... ou melhor, passar essa responsabilidade de conversão das respostas para outra camada de <em>parsers</em>.</p>\n<p>O mais legal disso é que a sua aplicação fica desacoplada do mecanismo de transporte. Isso é, para fazer essa mesma funcionalidade via <strong>cli</strong> (terminal), por exemplo, bastaria chamar o Interactor e supri-lo com os mesmos parâmetros que são passados pelo controller (tratar as exceptions também) e voilà! Temos um <em>cli command</em> que faz o mesmo que o controller, só que usando protocolos diferentes.</p>\n<h2 id="o-que-o-seu-interactor-deve-saber"><a href="#o-que-o-seu-interactor-deve-saber" aria-hidden="true"><span class="icon icon-link"></span></a>O que o seu Interactor deve saber</h2>\n<p>Qualquer coisa que não seja relacionada com funções de outras camadas da sua aplicação. Isso é, não devemos persistir dados diretamente do Interactor, por exemplo. Entretanto, podemos utilizar os repositórios da aplicação diretamente nele. Dessa forma, poderiamos ter um <em>Interactor</em> por <em>Use Case</em>, como é sugerido pelo próprio Uncle Bob. Ou seja, um Controller teria conhecimento dos Interactors (ou Use Cases) que ele é responsável. Fez todo sentido para mim quando ouvi falar disso. Mas ainda estou aprendendo a colocar em prática esse padrão. Farei um video de teste desse padrão e atualizarei o <em>post</em> colocando o link aqui.</p>\n<h2 id="updated-show-me-the-code"><a href="#updated-show-me-the-code" aria-hidden="true"><span class="icon icon-link"></span></a>Updated: Show me the code!</h2>\n<p>Enquanto não gravo o vídeo, resolvi compartilhar um pouco de código aqui pra exemplificar melhor. Vamos lá!</p>\n<p>Dado o seguinte caso de uso: Passar uma task para outro usuário em um sistema de gerenciamento de tarefas. Precisamos atualizar a task e notificar o novo usuário que o mesmo tem uma nova task. Normalmente, teriamos um controller assim:</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Repositories<span class="token punctuation">\\</span>TaskRepository</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Repositories<span class="token punctuation">\\</span>UserRepository</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Mailers<span class="token punctuation">\\</span>UserMailer</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TasksController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @var Acme\\Repositories\\TaskRepository\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$tasks</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var Acme\\Repositories\\UserRepository\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$users</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var Acme\\Mailers\\UserMailer\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @param TaskRepository $tasks\n     * @param UserRepository $users\n     * @param UserMailer $mailer\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>\n        TaskRepository <span class="token variable">$tasks</span><span class="token punctuation">,</span> \n        UserRepository <span class="token variable">$users</span><span class="token punctuation">,</span> \n        UserMailer <span class="token variable">$mailer</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span> <span class="token operator">=</span> <span class="token variable">$tasks</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span> <span class="token operator">=</span> <span class="token variable">$users</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span> <span class="token operator">=</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @param string|int $task_id\n     * @param string|int $user_id\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$userTo</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$user_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$task</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$task</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token variable">$userTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token scope">Redirect<span class="token punctuation">::</span></span><span class="token function">to</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notifyTaskTransference</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">,</span> <span class="token variable">$userTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token scope">Redirect<span class="token punctuation">::</span></span><span class="token function">to</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'message\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token scope">Lang<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks.transfer.success\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>O código até que tá limpo, mas ainda dá pra melhorar.. Nosso Controller, que faz está fora da camada da nossa aplicação (faz parte do front-end, por assim dizer), sabe que temos repositórios, mailers, etc, etc.. Idealmente, nosso Controller deve saber apenas QUEM realiza suas tarefas e os possíveis erros. Uma forma muito mais limpa para tal modelo é utilizando Interactors, como mostrado abaixo:</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Tasks</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Repositories<span class="token punctuation">\\</span>TaskRepository</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Repositories<span class="token punctuation">\\</span>UserRepository</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Mailers<span class="token punctuation">\\</span>UserMailer</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>CannotTransferTaskException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TransferenceInteractor</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @var Acme\\Repositories\\TaskRepository\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$tasks</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var Acme\\Repositories\\UserRepository\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$users</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var Acme\\Mailers\\UserMailer\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @param TaskRepository $tasks\n     * @param UserRepository $users\n     * @param UserMailer $mailer\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>\n        TaskRepository <span class="token variable">$tasks</span><span class="token punctuation">,</span>\n        UserRepository <span class="token variable">$users</span><span class="token punctuation">,</span>\n        UserMailer <span class="token variable">$mailer</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span> <span class="token operator">=</span> <span class="token variable">$tasks</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span> <span class="token operator">=</span> <span class="token variable">$users</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span> <span class="token operator">=</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @param string|int $task_id\n     * @param string|int $user_id\n     * @return void\n     * @throws CannotTransferTaskException\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$userTo</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$user_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$task</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$task</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token variable">$userTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotTransferTaskException</span><span class="token punctuation">(</span><span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getErros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notifyTaskTransference</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">,</span> <span class="token variable">$userTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>Com isso, nosso interactor seria responsável por fazer a transferência da task e disparar exceptions em caso de erros. Nosso Controller ficaria muito mais limpo, assim:</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Tasks<span class="token punctuation">\\</span>TransferenceInteractor</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>CannotTransferTaskException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TasksController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @var Acme\\Interactors\\Tasks\\TransferenceInteractor\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$tasksDelivery</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @param TransferenceInteractor $tasksDelivery\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>TransceferenceInteractor <span class="token variable">$tasksDelivery</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasksDelivery</span> <span class="token operator">=</span> <span class="token variable">$tasksDelivery</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @param string|int $task_id\n     * @param string|int $user_id\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasksDelivery</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> <span class="token scope">Redirect<span class="token punctuation">::</span></span><span class="token function">to</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'message\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token scope">Lang<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks.transfer.success\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>CannotTransferTaskException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token scope">Redirect<span class="token punctuation">::</span></span><span class="token function">to</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getErrorMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>Pronto! Agora, nosso controller não sabe mais como fazemos as transferências das tasks. Apenas sabem QUEM faz e os possíveis erros retornados. Assim. Esse approach é muito mais elegante e limpo. Assim como muito mais fácil de testar e adicionar features e error handlers. Digamos que você tenha um watcher analisando as tasks em background para balancear as tasks com os desenvolvedores mais "folgados". Seria feito um cli-command para isso, assim:</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Input<span class="token punctuation">\\</span>InputArgument</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Tasks<span class="token punctuation">\\</span>TransferenceInteractor</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>CannotTransferTaskException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TaskTransferenceCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @var Acme\\Interactors\\Tasks\\TransferenceInteractor\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$tasksDelivery</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var string\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"acme:transfer-task"</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var string\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Transfers a task to a given user"</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @param TransferenceInteractor $tasksDelivery\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>TransceferenceInteractor <span class="token variable">$tasksDelivery</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token scope"><span class="token keyword">parent</span><span class="token punctuation">::</span></span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasksDelivery</span> <span class="token operator">=</span> <span class="token variable">$tasksDelivery</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * handles the command\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token variable">$task_id</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'task_id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$user_id</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'user_id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">taskDelivery</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token scope">Lang<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks.transfer.success\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>CannotTransferTaskException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getErrorMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$message</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @return array\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">[</span><span class="token single-quoted-string string">\'task_id\'</span><span class="token punctuation">,</span> <span class="token scope">InputArgument<span class="token punctuation">::</span></span><span class="token constant">REQUIRED</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'The ID of the task to be transfered\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">[</span><span class="token single-quoted-string string">\'user_id\'</span><span class="token punctuation">,</span> <span class="token scope">InputArgument<span class="token punctuation">::</span></span><span class="token constant">REQUIRED</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'The id of the user to transfer the task to\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @return array\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span></span></pre>\n<p>O exemplo do command não foi dos melhores, mas espero que dê pra entender onde quero chegar com isso.</p>\n<p>É isso! O que vocês acham desse padrão? Como vocês organizam suas aplicações? Deixem um comentário ai e até a próxima!</p>\n'}}]}}}}}}]);