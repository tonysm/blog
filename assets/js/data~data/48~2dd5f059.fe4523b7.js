(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{298:function(n){n.exports={data:{tag:{title:"laravel",belongsTo:{edges:[{node:{title:"Using MySQL for testing (on Laravel)",path:"/blog/using-my-sql-for-testing-on-laravel",date:"15. March 2019",timeToRead:1,description:"Run your feature tests against a MySQL instance without sacrificing either performance or workflow of using an in-memory database (like SQLite).",coverImage:null,content:'<p>I wrote about running your test suite faster against a disk-based database instead of an in-memory one, and a Docker trick that uses tmpfs to have MySQL writing in-memory.</p>\n<p>If you are into Laravel and/or testing, check it out at <a href="https://madewithlove.be/using-mysql-for-testing-on-laravel/" target="_blank" rel="nofollow noopener noreferrer">madewithlove\'s blog</a>.</p>\n'}},{node:{title:"Queues and Async Apps",path:"/blog/queues-and-async-apps",date:"18. January 2019",timeToRead:1,description:"Queues and Async Apps",coverImage:null,content:'<p>Right after I posted the <a href="https://www.youtube.com/watch?v=GtphrhnFwZQ" target="_blank" rel="nofollow noopener noreferrer">video</a> where I introduce the <a href="https://docs.beyondco.de/laravel-websockets/" target="_blank" rel="nofollow noopener noreferrer">Laravel WebSockets Package</a>, I got a request to maybe talk more about a preview of an old talk I had on my YouTube channel. Decided to record it and share it.</p>\n<p>In this talk I walk-through a problem of a server provisioning application, where we need to deal with long-running operations (like install dependencies in a server), and how to approach that using Queues and Workers. Then we jump in to enrich the UI with some real-time feedback using WebSockets.</p>\n<p>Here it is:</p>\n<iframe width="560" height="315" src="https://www.youtube.com/embed/mhmkap7jdu8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n<p>Hope you like it.</p>\n'}},{node:{title:"Using Laravel WebSockets package (Video)",path:"/blog/using-laravel-web-sockets-package-video",date:"4. December 2018",timeToRead:1,description:"There's a new package that allows us to run a WebSockets server in PHP integrated with our Laravel applications very easily.",coverImage:null,content:'<p>This is a short introduction to using a recently released package called <a href="https://docs.beyondco.de/laravel-websockets/" target="_blank" rel="nofollow noopener noreferrer">Laravel WebSockets</a> as a replacement for Pusher. Hope you like it.</p>\n<iframe width="560" height="315" src="https://www.youtube.com/embed/GtphrhnFwZQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n'}},{node:{title:"Kubernetes 101",path:"/blog/kubernetes-101",date:"25. October 2018",timeToRead:1,description:"When I was learning Kubernetes, I tried to write down my learnings and experiments. This article covers the basics, like lingo, a bit of the architecture, and also a small demo of running a Laravel application on Kubernetes.",coverImage:null,content:'<p>When I was learning Kubernetes, I tried to write down my learnings and experiments. This article covers the basics, like lingo, a bit of the architecture, and also a small demo of running a Laravel application on Kubernetes.</p>\n<p>If you are into Laravel, Docker, and/or Kubernetes, check it out at <a href="https://madewithlove.be/kubernetes-101-the-basics/" target="_blank" rel="nofollow noopener noreferrer">madewithlove\'s blog</a>.</p>\n'}},{node:{title:"Building a Slack clone using Laravel, Tailwind CSS and Vue.js",path:"/blog/building-a-slack-clone-using-laravel-tailwind-css-and-vue-js",date:"28. March 2018",timeToRead:1,description:"I wrote about an experiment I did while I was trying to learn TailwindCSS where I built a Slack clone using Tailwind, Laravel, and Vue.",coverImage:null,content:'<p>I shared a <a href="https://twitter.com/tony0x01/status/967481096995856385" target="_blank" rel="nofollow noopener noreferrer">tweet</a> a while back about building a Slack clone app in PHP using Laravel, VueJS, TailwindCSS, and Pusher. That got some attention, so I was invited by <a href="https://pusher.com/" target="_blank" rel="nofollow noopener noreferrer">Pusher</a> to blog about using Pusher on it.</p>\n<p>If you are into Laravel and/or WebSockets, check it out at <a href="https://blog.pusher.com/slack-clone-laravel-tailwindcss-vuejs/" target="_blank" rel="nofollow noopener noreferrer">pusher blog</a>.</p>\n'}},{node:{title:"Laravel 5 Command-Oriented Approach",path:"/blog/laravel-5-command-oriented-approach",date:"2. January 2015",timeToRead:6,description:"",coverImage:null,content:'<p>A lot of shiny things around the Laravel world that I would like to talk, so I chose the new CommandBus that Laravel 5 brings by default. To start I\'d like to say that it\'s pretty damn cool.</p>\n<h2 id="command-oriented-architecture"><a href="#command-oriented-architecture" aria-hidden="true"><span class="icon icon-link"></span></a>Command-Oriented Architecture</h2>\n<p>I\'m not gonna explain in details this approach, but I\'m going to give a brief introduction on the topic and link a few more content at the bottom.</p>\n<p>Basically, we should describe our application into commands to make our intentions explicit. Let\'s say you have a subscription system on your app, you\'d have a "SubscribeUserCommand" class, or something similar, that maps to its own handler, in this case "SubscribeUserCommandHandler". Doing so you actually decouple your application from the transport layer (HTTP, cli, queue job, event handler, etc..). It means that you can <em>dispatch</em> this command from a\ncontroller or a console command (cli) with no trouble.</p>\n<h2 id="laravel-way"><a href="#laravel-way" aria-hidden="true"><span class="icon icon-link"></span></a>Laravel way</h2>\n<p>We used to implement this approach using some packages (see <a href="https://github.com/laracasts/Commander" target="_blank" rel="nofollow noopener noreferrer">laracasts/commander</a>) which is actually pretty neat and works like a charm. However, Laravel 5 brings it\'s own CommandBus with a plus: it can handle commands (AND EVENTS!!!) in background (queues).</p>\n<p>A typical command looks like this:</p>\n<pre class="language-php">// app/Commands/SubscribeUserCommand.php\n<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> \n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Commands</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Subscriptions<span class="token punctuation">\\</span>MembershipType</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SubscribeUserCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token variable">$userId</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token variable">$membershipType</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$userId</span><span class="token punctuation">,</span> MembershipType <span class="token variable">$membershipType</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userId</span> <span class="token operator">=</span> <span class="token variable">$userId</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">membershipType</span> <span class="token operator">=</span> <span class="token variable">$membershipType</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>Then you should have a handler like this:</p>\n<pre class="language-php">// app/Handlers/Commands/SubscribeUserCommandHandler.php\n<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> \n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>Commands</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Commands<span class="token punctuation">\\</span>SubscribeUserCommand</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>Dispatcher</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Payment<span class="token punctuation">\\</span>PaymentInterface</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SubscribeUserCommandHandler</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token variable">$userRepository</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token variable">$events</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token variable">$payment</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>UserRepository <span class="token variable">$userRepository</span><span class="token punctuation">,</span> Dispatcher <span class="token variable">$events</span><span class="token punctuation">,</span> PaymentInterface <span class="token variable">$payment</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userRepository</span> <span class="token operator">=</span> <span class="token variable">$userRepository</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">events</span> <span class="token operator">=</span> <span class="token variable">$events</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">payment</span> <span class="token operator">=</span> <span class="token variable">$payment</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>SubscribeUserCommand <span class="token variable">$command</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userRepository</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">membershipType</span><span class="token punctuation">,</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">payment</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dispatchEvents</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">releaseEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token comment">/**\n     * @param array $events\n     * @return void\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">dispatchEvents</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$events</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$events</span> <span class="token keyword">as</span> <span class="token variable">$event</span><span class="token punctuation">)</span>\n            <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">events</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>Which you can dispatch, let\'s say, from your controller like so:</p>\n<pre class="language-php">// app/Http/Controllers/SubscriptionsController.php\n<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> \n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>Guard</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Commands<span class="token punctuation">\\</span>SubscribeUserCommand</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SubscriptionControllers</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token variable">$auth</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Guard <span class="token variable">$auth</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'auth\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">auth</span> <span class="token operator">=</span> <span class="token variable">$auth</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>SubscribeUserRequest <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$command</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubscribeUserCommand</span><span class="token punctuation">(</span>\n            <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">auth</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">,</span>\n            <span class="token scope">MembershipType<span class="token punctuation">::</span></span><span class="token function">build</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"membership_type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                \n        <span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">route</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>The <em>dispatch</em> method is inherited from the Controller class (which uses the <code>Illuminate\\Foundation\\Bus\\DispatchesCommands</code>) and it maps commands to handlers. Cool stuff. This example works synchronously. If you need to handle the command in background (queue jobs) you just have to implement the <code>Illuminate\\Contracts\\Queue\\ShouldBeQueued</code> interface on your command, like so:</p>\n<pre class="language-php">// app/Commands/SubscribeUserCommand.php\n<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> \n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Commands</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Subscriptions<span class="token punctuation">\\</span>MembershipType</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Queue<span class="token punctuation">\\</span>ShouldBeQueued</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SubscribeUserCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldBeQueued</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token variable">$userId</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token variable">$membershipType</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$userId</span><span class="token punctuation">,</span> MembershipType <span class="token variable">$membershipType</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userId</span> <span class="token operator">=</span> <span class="token variable">$userId</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">membershipType</span> <span class="token operator">=</span> <span class="token variable">$membershipType</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>That is it! Well, actually you have to setup the queue config on <code>config/queue.php</code>, but I\'m making a point here.</p>\n<h2 id="handling-events-in-background"><a href="#handling-events-in-background" aria-hidden="true"><span class="icon icon-link"></span></a>Handling Events in background</h2>\n<p>As I said, it is also possible to handle events in background, let\'s see an example. Let\'s assume your User you have a <em>subscribe</em> named constructor on your model that builds the user instance and saves it (Eloquent/ActiveRecord). Your model should look like:</p>\n<pre class="language-php">// app/User.php\n<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> \n\n<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>UserSubscribedEvent</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Subscriptions<span class="token punctuation">\\</span>MembershipType</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Payment<span class="token punctuation">\\</span>PaymentInterface</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>MembershipType <span class="token variable">$membershipType</span><span class="token punctuation">,</span> PaymentInterface <span class="token variable">$payment</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$payment</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">purchaseSubscription</span><span class="token punctuation">(</span><span class="token this">$this</span><span class="token punctuation">,</span> <span class="token variable">$membershipType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">subscription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$membershipType</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">raise</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">UserSubscribedEvent</span><span class="token punctuation">(</span><span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token variable">$membershipType</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token this">$this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></span></pre>\n<p>Your event class is just a DTO and looks like this:</p>\n<pre class="language-php">// app/Events/UserSubscribedEvent.php\n<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> \n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Events</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Queue<span class="token punctuation">\\</span>SerializesModels</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Subscriptions<span class="token punctuation">\\</span>MembershipType</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">UserSubscribedEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Event</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token package">SerializesModels</span><span class="token punctuation">;</span>\n        \n    <span class="token keyword">public</span> <span class="token variable">$userId</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token variable">$membershipType</span><span class="token punctuation">;</span>\n            \n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$userId</span><span class="token punctuation">,</span> MembershipType <span class="token variable">$membershipType</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userId</span> <span class="token operator">=</span> <span class="token variable">$userId</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">membershipType</span> <span class="token operator">=</span> <span class="token variable">$membershipType</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>Then you have a handler like so:</p>\n<pre class="language-php">// app/Handlers/Events/UserSubscribedEventHandler;\n<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> \n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>Events</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>UserSubscribedEvent</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Mailers<span class="token punctuation">\\</span>UserMailer</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">UserSubscribedEventHandler</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>UserMailer <span class="token variable">$mailer</span><span class="token punctuation">,</span> UserRepository <span class="token variable">$userRepository</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span> <span class="token operator">=</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userRepository</span> <span class="token operator">=</span> <span class="token variable">$userRepository</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>UserSubscribedEvent <span class="token variable">$event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userRepository</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sendTo</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildMessage</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">membershipType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n                            \n    <span class="token comment">// ... the buildMessage should be private or protected</span>\n<span class="token punctuation">}</span></span></pre>\n<p>To register your handler just go to <code>app/Providers/EventServiceProvider.php</code> and add your listener to the <code>$listen</code> property, like so:</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> \n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Providers</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>EventServiceProvider</span> <span class="token keyword">as</span> ServiceProvider<span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">EventServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">/**\n     * The event handler mappings for the application.\n     *\n     * @var array\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$listen</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n        \\<span class="token scope">App<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>UserSubscribedEvent<span class="token punctuation">::</span></span><span class="token keyword">class</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span> \n            \\<span class="token scope">App<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>UserSubscribedEventHandler<span class="token punctuation">::</span></span><span class="token keyword">class</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span></span></pre>\n<p>This action is executed synchronously, it means that your user is waiting for the event handler to act before being redirected to the application.</p>\n<p>To handle the event in background you just have to implement the same <code>Illuminate\\Contracts\\Queue\\ShouldBeQueued</code> interface on your event handler class, like so:</p>\n<pre class="language-php">// app/Handlers/Events/UserSubscribedEventHandler;\n<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> \n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>Events</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>UserSubscribedEvent</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Mailers<span class="token punctuation">\\</span>UserMailer</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Queue<span class="token punctuation">\\</span>ShouldBeQueued</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">UserSubscribedEventHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldBeQueued</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>UserMailer <span class="token variable">$mailer</span><span class="token punctuation">,</span> UserRepository <span class="token variable">$userRepository</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span> <span class="token operator">=</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userRepository</span> <span class="token operator">=</span> <span class="token variable">$userRepository</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n        \n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>UserSubscribedEvent <span class="token variable">$event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userRepository</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sendTo</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildMessage</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">membershipType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n        \n    <span class="token comment">// ... the buildMessage should be private or protected</span>\n<span class="token punctuation">}</span></span></pre>\n<p>Oh, by the way, you just give the event class to the event dispatcher, like so (using the Facade):</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token comment">// somewhere in your application</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>UserSubscribedEvent</span><span class="token punctuation">;</span>\n\n<span class="token scope">Event<span class="token punctuation">::</span></span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserSubscribedEvent</span><span class="token punctuation">(</span><span class="token variable">$userId</span><span class="token punctuation">,</span> <span class="token variable">$membershipType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></pre>\n<h2 id="conclusion"><a href="#conclusion" aria-hidden="true"><span class="icon icon-link"></span></a>Conclusion</h2>\n<p>That is it. To sum up, I like to think that Commands can change state, while Events just react to these state changes and if an Event handler has to change anything it MUST do it through Commands.</p>\n<p>This command bus looks pretty cool. Fun fact: you can have multiple event listeners/handlers where some of them executes synchronously and others execute asynchronously. I loved it, to make it work before we had to have an event listener that add a job to the queue and then handle the event on the job handler. Now it\'s pretty damn simple.</p>\n<h2 id="useful-resources"><a href="#useful-resources" aria-hidden="true"><span class="icon icon-link"></span></a>Useful resources</h2>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=fbSYZFZCFS0" target="_blank" rel="nofollow noopener noreferrer">DevDiscussions - The Command Bus</a></li>\n<li><a href="https://laracasts.com/lessons/laravel-5-commands" target="_blank" rel="nofollow noopener noreferrer">Laracast about the Laravel 5 Command bus</a></li>\n<li><a href="https://laracasts.com/series/commands-and-domain-events" target="_blank" rel="nofollow noopener noreferrer">Laracast series about Commands and Domain Events</a></li>\n<li><a href="https://cqrs.wordpress.com/documents/task-based-ui/" target="_blank" rel="nofollow noopener noreferrer">Task-based UI</a></li>\n<li><a href="http://shawnmc.cool/command-bus" target="_blank" rel="nofollow noopener noreferrer">Command Bus by Shawn McCool</a></li>\n<li><a href="http://verraes.net/2013/04/crud-is-an-anti-pattern/" target="_blank" rel="nofollow noopener noreferrer">CRUD is an antipattern</a></li>\n</ul>\n'}}]}}}}}}]);