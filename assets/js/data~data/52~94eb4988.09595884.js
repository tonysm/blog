(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{302:function(s){s.exports={data:{tag:{title:"PHP",belongsTo:{edges:[{node:{title:"Desenvolvendo uma API - Parte 2",path:"/blog/desenvolvendo-uma-api-parte-2",date:"7. March 2014",timeToRead:5,description:"Desenvolvendo uma API - Parte 2",coverImage:{type:"image",mimeType:"image/png",src:"/assets/static/api-cloud-tumb.633a126.47a290f.png",size:{width:800,height:200},sizes:"(max-width: 800px) 100vw, 800px",srcset:["/assets/static/api-cloud-tumb.a67b0b2.47a290f.png 480w","/assets/static/api-cloud-tumb.633a126.47a290f.png 800w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 200' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-54'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-54)' width='800' height='200' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFnElEQVRYw81Xa0xURxTeEoUfEH6YYBVobUVtUoGiDVL6x1owUVNtSGz4QYINMa3aIk2koVBAtJSKXW2MLSlKifIURSpvYQF3l0Wpj0JFLFnLVmBlcamLluWxj3u/3pm797IvW9dA0gmzM3t37pw53/m%2bcwYJ5rtZLfyoOguc%2bZhOWZYhH9yfYydtfHwcx45J4evri6qqKjC2bVhbFxpr0AJH3gG%2beQvpG4Pw4boApEQvA3M4CvhqA1jNDX4hY6W2nrVJFhoAehQOAOIwwzCi46QND4/g0SMDNJo/sXzZi5iYnAYGZGCKdwNn93J9D79H6SfADx8AOW/i133h%2bP69V9CzLwyn3n8VHbtDgYzXgYY83tb/CQBWYADDOCwxGAxoaGiCQqHEL93XUVZajpCVKzGsNwDVaWBO7QJ66sBeLQWuloG5Xg1UfIrhz0Lh670IEokEXi9IsMhLggA/H9xMCgHqsmG1gb1gANhT1zmiYmRtALCUAR%2bJDLBYLOjsVOFycwsunK%2bGTqdz2Pt04WmMjD/mHPkSrLJYpD8ZKXwjPRhLWY3w5X7Y/3YQDsW8jC82BiN0uT/6k14Cemv4dQvFAHtHiTMOQbda5wDiAGAFAMqSRU3Lr8jR2/ubiwyEphsdxfnay%2bg5mgT2SiG/n3mWB9Rq5gFp/Q5Tqa8BWeHAoXXAwTdgPLAauJDG5xn%2bEB4RVuKp88J8ZmYGIyMjriDYAIDqDJj8d4E7jRjqqEJdbb24dmpqChMTE1Cr1VQOQqKcmTVxkuhGR8MlUToOrCMf/TKw5SmcTBLBluwDbtXMAfocIEieh/6FhYUICgrCkiVLEBERgba2NvrcZDLBYuY6Nzff6waKdkF7JA4//yjFuOExH2ndGJKSkpCTk4PExERIpVL63GKxirZk7QroH%2brn7ApBEOZOlYK1Oc0uJAME2peWltIklJCQgIKCAmzatIl%2bHxgYcPtu1607GHv0RPw%2bNHQfFRUVKCkpQV9fH5TKTtEdYmOGM9PZ2QWtVjvHPjHCLK9xxpboSMTtNe%2bh8x5LgLTQ0FBERUXh2rVriIyMRF5eHry8vBAdHY3c3FxkZGQgMzMTWVmZSPs8FQe5uXHaDP3ELExmK6yMOwMMDH%2bboBkz4a56CI0NjTRX2DPPXoZEbgQsK5Gbm7vFggFAjC5dupQ639TURCOvUCjg7%2b9P5bB9%2b3Zs2bIFW7duxbZt27B582bs2bMXnVy5u6czoqtfjz9GjRh/YoJxxgrtXyYM6qbxwMDg/tgUZG1X0NzUzOWFCZfcY59nXCov99ylGs03AILx%2bPh4rFmzBuXl5cjPz0dlZSUFori4%2bKnv31Vr0P6TFI0FuZCruvG7Ro9e9UO0tHehtr4Fl1vlOPatFH23b4vvMIx758l3lUqF6upqmnuMRqNtPfNcIDxzEhQoOcqVq%2bDgYOp0YGAgHePi4ujv5JBms5kyhXQyt5pm%2bQ1qMrgafwj9mgdob21BO3f427293BoTKrmcEBISQtfb23J2vqOjg4JPbAo9ICAARUVFDiB4IgePJCAcjJSxkydPIiUlhSY0Z5AcdMnplDxlLmaBrf/a7f5yuZw6Njk56eKIkHxJtInDPj4%2bFHihE%2bmR5ydOnHBhyrwC4AyC8%2b8OUbOr26zFxI%2bXcsA2HqFgsBYzXSdEXCaTUQDI3eJp7COsW79%2bPU2ysbGx2LFjB80zpBolJydTYAYHB596xnm9BxADAsXJ6FZ7TuWLLdsP9twB8VZnn1dIdFetWkUvRWTP6elpCoagbyH6xNmYmBgHCZCenZ1Nx%2bPHj4vJel4Z8G%2bAuDUk1GjSbl4EjsYChzfwPT8GuHHB9m8DT2%2blUglvb2%2bsXbsW4eHhCAsLEzu5aK1YsYI6uHPnTlphyHzx4sV09PPzQ3p6Op2npqa6VIX/av8Ar7VJh2FSCdEAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},content:'<p>Atualmente o modelo de API\'s mais utilizado é o REST. Não conhece? Explicarei um pouco aqui do funcionamento desse modelo. A teoria é bem simples, na verdade, mas muitas vezes subestimada.</p>\n<p>Para começo de conversa, vou linkar aqui um video que abriu a minha cabeça para o que é REST de verdade. O video se chama "Teach a dog to REST" e é incrível! Esse video caiu como uma luva para mim, pois eu tinha acabado de fazer uma API num antigo trabalho e não tinha o menor conhecimento sobre REST, acabei cometendo vários erros como as URLs mostradas no vídeo. Sem mais delongas, assistam ao <a href="https://vimeo.com/17785736" target="_blank" rel="nofollow noopener noreferrer">video</a>.</p>\n<p>Construir uma API é um processo que parece simples no começo, mas, acreditem, é complexo pra caramba! REST é o conceito básico das API hoje em dia, existem outros modelos como o SOAP, mas não vou entrar em detalhes, até porque nunca os usei na prática.</p>\n<p>Uma boa API é um problema de design, como é falado no vídeo. A API que citei acredito que ainda está em uso hoje em dia e alguns erros foram cometidos no processo de desenvolvimento. Não por ser um time ruim, mas porque eramos todos novos no ramo e não conheciamos as melhores práticas e todo o universo por trás das APIs.</p>\n<p>Fizemos URL\'s feias, como essas:</p>\n<pre>\n/getAllUsersWithTasks\n/getAllFinishedTasks\n/getAllPendingTasksWithUser/{user\\_id}\n</pre>\n<p>Qual o recurso negóciado nessas URL\'s? Não dá pra saber só de olhar a URL, temos que tentar ler a mesma e compreender o que pode vir dela. Ah, e basicamente só utilizavamos dois métodos HTTP para os requests GET e POST.</p>\n<h2 id="o-que-é-necessário"><a href="#o-que-%C3%A9-necess%C3%A1rio" aria-hidden="true"><span class="icon icon-link"></span></a>O que é necessário</h2>\n<p>Vou listar aqui o que eu acredito ser necessário para uma boa API REST.</p>\n<ul>\n<li>Utilizar muito bem os vérbos HTTP</li>\n<li>Utilizar apenas recursos nas URLs</li>\n<li>Toda complexidade deve ser tratada fora da URL (depois do ?)</li>\n<li>Linkar muito bem os recursos (Relacionamentos)</li>\n<li>Pense sempre RESTful</li>\n</ul>\n<h2 id="utilizando-110-do-http"><a href="#utilizando-110-do-http" aria-hidden="true"><span class="icon icon-link"></span></a>Utilizando 110% do HTTP</h2>\n<p>Todos os <em>clients</em> que irão utilizar nossas API\'s REST a farão (até onde sei) via HTTP. HTTP é um protocolo de comunicação que é a base da nossa WEB. Para melhor entendermos REST, precisamos entender o HTTP. Existem cerca de 9 métodos HTTP, conforme a <a href="http://pt.wikipedia.org/wiki/Hypertext_Transfer_Protocol#M.C3.A9todos" target="_blank" rel="nofollow noopener noreferrer">Wikipédia</a>, mas falaremos basicamente de 6, são eles: GET, POST, PATCH, PUT, DELETE e OPTIONS.</p>\n<p>Abaixo, vamos entender melhor o que são cada um desses métodos:</p>\n<ul>\n<li>GET - solicitar recursos;</li>\n<li>POST - criar recursos;</li>\n<li>PUT - atualizar um recurso por completo;</li>\n<li>PATCH - atualizar parte de um recurso;</li>\n<li>DELETE - excluir um recurso;</li>\n<li>OPTIONS - utilizado por apps front-end para saber quais métodos estão disponíveis na nossa API (ver <a href="http://pt.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="nofollow noopener noreferrer">CORs</a>);</li>\n</ul>\n<p>Falaremos mais sobre o CORs depois.</p>\n<h2 id="exemplos"><a href="#exemplos" aria-hidden="true"><span class="icon icon-link"></span></a>Exemplos</h2>\n<p>Um exemplo de request para a nossa API usando GET:</p>\n<pre>\nGET /dogs HTTP1.1\nHost: www.example.com\n</pre>\n<p>Esse exemplo acima poderia ser utilizado caso o usuário precisasse listar todos os cachorros, por exemplo. Não estamos considerando paginação ainda.</p>\n<p>Para criar um novo cachorro na API, utilizaria o método POST:</p>\n<pre>\nPOST /dogs HTTP 1.1\nHost: www.example.com\nPayload: {"name": "Luke", "race": "unknown"}\n</pre>\n<p>Você pode ver que a URL é a mesma, porém o método HTTP agora é POST e enviamos para o servidor os dados do novo cachorro via payload.</p>\n<p>Agora, digamos que queremos atualizar o nome do cachorro acima e que o mesmo é representado pelo ID 1, temos então um PATCH:</p>\n<pre>\nPATCH /dogs/1 HTTP 1.1\nHost: www.example.com\nPayload: {"name": "Luke teste"}\n</pre>\n<p>Pronto. Com isso, atualizamos o nome do nosso cachorro. Um detalhe aqui é que utilizamos o método PATCH e não PUT. Por que? Porque o PUT é utilizado quando queremos atualizar todos os atributos de um recurso. É um <em>replace</em>, praticamente.</p>\n<p>Para deletar o cachorro cadastrado, utilizamos o método DELETE:</p>\n<pre>\nDELETE /dogs/1 HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Pronto. Nosso cachorro foi excluído.</p>\n<p>Vejam que não entramos em detalhes sobre o payload ou sobre as respostas, isso será tratado mais para frente, em outro post.</p>\n<h2 id="complexidades"><a href="#complexidades" aria-hidden="true"><span class="icon icon-link"></span></a>Complexidades</h2>\n<p>Mas, claro, nem tudo são flores. Digamos que eu queira listar apenas os cachorros sem raça, como eu faria? Seguindo o padrão (errado) apresentado no começo do artigo, seria algo mais ou menos assim:</p>\n<pre>\nGET /dogsWithUnknownRace HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Certo. Já vimos que isso é errado, então, não façam assim. Mas de que outra forma podemos passar complexidades para nossas URL\'s? Resposta: Não passe. Mantenha a complexidade fora da URL. Como? Assim:</p>\n<pre>\nGET /dogs?race=unknown HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Dessa forma, sabemos exatamente que estamos listando cachorros apenas com raça desconhecida. Assim, mantemos a complexidade fora da URL, e essa fica apenas com o nosso recurso principal. Vamos para mais um exemplo: Digamos que você agora quer listar todos os cachorros de raça desconhecida da cor preta.</p>\n<pre>\nGET /dogs?race=unknown&color=black HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Bom, espero que tenham entendido onde quero chegar.</p>\n<h2 id="relacionamentos"><a href="#relacionamentos" aria-hidden="true"><span class="icon icon-link"></span></a>Relacionamentos</h2>\n<p>Digamos que os usuários da nossa API são os donos dos cachorros. Para saber qual o dono do cachorro de ID 1, por exemplo, temos o seguinte request:</p>\n<pre>\nGET /dogs/1/owners HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Agora, digamos que o dono do cachorro de ID 1, tenha outros 2 cachorros e seu ID na API é 42, para saber quais os cachorros que esse usuário tem, podemos fazer assim:</p>\n<pre>\nGET /owners/42/dogs HTTP 1.1\nHost: www.example.com\n</pre>\n<p>Como exemplificado acima, podemos ter mais de uma forma para acessar um recurso. Fica a cargo do time escolher quais os recursos principais e mais coesos e onde e quando utilizar os recursos de relacionamento.</p>\n<p>Um ponto importante sobre relacionamentos é que o ultimo recurso da URL deve ser o foco da requisição. Ou seja, na url <em>/dogs/42/owners</em> estamos falando dos <em>owners</em> e não dos cachorros. O cachorro só está ai por conta do relacionamento.</p>\n<h2 id="concluindo"><a href="#concluindo" aria-hidden="true"><span class="icon icon-link"></span></a>Concluindo...</h2>\n<p>Bom, é isso. Isso é o básico do REST. Não entrei em detalhes sobre HEADERS e outros detalhes mais que pretendo falar mais pra frente. A ideia principal aqui é ser coeso. Não colocar complexidades nas URLs e essas serem apenas recursos, não verbos. Utilizar ao máximo o que o HTTP tem para nos oferecer e documentar tudo que pudermos.</p>\n<p>Uma boa documentação é uma excelente aliada. Outro ponto importante é sempre usar o plural nos recursos, faz mais sentido (basta ler para perceber) do que usar singulares. Não precisa usar IDs não URLs também. Podemos utilizar qualquer atributo único no lugar do ID, embora eu prefira os IDs.</p>\n<p>É isso, pessoal. Espero ter deixado claro o funcionamento básico do REST. Qualquer dúvida, podem falar.</p>\n'}},{node:{title:"Controllers e Mecanismos de transporte",path:"/blog/controllers-e-mecanismos-de-transporte",date:"21. February 2014",timeToRead:6,description:"Controllers e Mecanismos de transporte",coverImage:{type:"image",mimeType:"image/jpeg",src:"/assets/static/transport-doctor-who.07cc2b7.0b6d77d.jpg",size:{width:860,height:252},sizes:"(max-width: 860px) 100vw, 860px",srcset:["/assets/static/transport-doctor-who.a67b0b2.0b6d77d.jpg 480w","/assets/static/transport-doctor-who.07cc2b7.0b6d77d.jpg 860w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 252' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-53'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-53)' width='860' height='252' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAATAEADASIAAhEBAxEB/8QAGwAAAgIDAQAAAAAAAAAAAAAAAAcFBgIDBAj/xAAsEAABAwMDAwMCBwAAAAAAAAABAgMRAAQFBhIhMUFRBxNhFYEiIzIzgpGx/8QAGAEAAwEBAAAAAAAAAAAAAAAABAUGAQP/xAAhEQACAQMEAwEAAAAAAAAAAAABAgADBBESITFRMjNBwf/aAAwDAQACEQMRAD8Ap%2bm8y0t7bdWfvPLP7vSftTOsMSxeY8qbt1jcOW1Hj5FLDTxNpeMMXFuhZmQ4DEieoNejNH32DRaOM3L7YcCvxTBj4muScypaq1NNR3idGmbmHWmkFKm1qABMbvI/qqnqLAHH3ACE7ilEp8U6dVZW3buFLsC2ditq5E9e9KLWmonLYvkEFBEGEjmf8pxbcZnGuQUJxNvp1jsm9hcllLB9pp2xUrhYJWVBBUAB07HnzW/U2RdymHuF32aDt0pht1CPbALhJO5MyeRAP37Vl6P6htzaZlkpSgFaF7V87pBSaqGQvXXkoZJlFuFNIhIEJkmCe9ObCkrh9Rkvf0VARwO4s8kHHLhSlq71zNbtxHipjKte2pRKP1GQai0JWNyx07ipx1wxmjiNLD3DvvFQWQQpIBFTuFu7g3El5ZKneZPWiigklSx3EsGQWouvqkyptUnzHSlfrRRlaZMUUU3t/EzLn1mcfpw6v6jeJ3HaWQY/lWWTuHWlvBtZSAtUcfNFFFWrsoYg/P0SeuRmkue5F3H5loSvkioN7iI4oooCpBxP/9k=' /%3e%3c/svg%3e"},content:'<p>O trabalho de um Controller é pegar informações HTTP e passar para a aplicação (como um mecanismo de transporte), o que faz todo sentido, já que não queremos ter Controllers sabendo demais. Mas, acontece que não é tão simples organizar o código, é uma tarefa bastante complicada, na verdade. Comecei a usar o <strong><em>Repository Pattern</em></strong>, mas acabei acomplando meus Controllers a vários repositórios, o que acaba sendo custoso, visto que para cada request, vários repositórios são carregados..</p>\n<p>Mas não acho que seja papel do Controller interagir diretamente com models ou Repositórios, então, isso sempre me incomodou. Até que, assistindo a um vídeo do <a href="http://cleancoders.com" target="_blank" rel="nofollow noopener noreferrer">Uncle Bob</a> em que ele mensiona os Interactors, pensei "É isso! Faz todo sentido!".</p>\n<p>Quem nunca se pegou pensando "como faço para utilizar o método desse controller em outro lugar?". A resposta é: "Você não deve utilizar seus controllers em outros lugares!".</p>\n<p>Para quem não viu, aqui vai um resumo.</p>\n<h2 id="interactors"><a href="#interactors" aria-hidden="true"><span class="icon icon-link"></span></a>Interactors</h2>\n<p>Com os Interactors, o papel do seu controller é basicamente capturar qualquer informação do protocolo utilizado (HTTP) como, por exemplo, qual o usuário autenticado no sistema, qual o id do <em>resource</em> que foi passado e entregar essas informações como argumentos para os <em>interactors</em>, assim como tratar as <em>exceções</em> disparadas pelos mesmos e converter essas informações para a resposta do <em>client</em> (HTML, JSON ou, quem sabe, (uhh!) XML)... ou melhor, passar essa responsabilidade de conversão das respostas para outra camada de <em>parsers</em>.</p>\n<p>O mais legal disso é que a sua aplicação fica desacoplada do mecanismo de transporte. Isso é, para fazer essa mesma funcionalidade via <strong>cli</strong> (terminal), por exemplo, bastaria chamar o Interactor e supri-lo com os mesmos parâmetros que são passados pelo controller (tratar as exceptions também) e voilà! Temos um <em>cli command</em> que faz o mesmo que o controller, só que usando protocolos diferentes.</p>\n<h2 id="o-que-o-seu-interactor-deve-saber"><a href="#o-que-o-seu-interactor-deve-saber" aria-hidden="true"><span class="icon icon-link"></span></a>O que o seu Interactor deve saber</h2>\n<p>Qualquer coisa que não seja relacionada com funções de outras camadas da sua aplicação. Isso é, não devemos persistir dados diretamente do Interactor, por exemplo. Entretanto, podemos utilizar os repositórios da aplicação diretamente nele. Dessa forma, poderiamos ter um <em>Interactor</em> por <em>Use Case</em>, como é sugerido pelo próprio Uncle Bob. Ou seja, um Controller teria conhecimento dos Interactors (ou Use Cases) que ele é responsável. Fez todo sentido para mim quando ouvi falar disso. Mas ainda estou aprendendo a colocar em prática esse padrão. Farei um video de teste desse padrão e atualizarei o <em>post</em> colocando o link aqui.</p>\n<h2 id="updated-show-me-the-code"><a href="#updated-show-me-the-code" aria-hidden="true"><span class="icon icon-link"></span></a>Updated: Show me the code!</h2>\n<p>Enquanto não gravo o vídeo, resolvi compartilhar um pouco de código aqui pra exemplificar melhor. Vamos lá!</p>\n<p>Dado o seguinte caso de uso: Passar uma task para outro usuário em um sistema de gerenciamento de tarefas. Precisamos atualizar a task e notificar o novo usuário que o mesmo tem uma nova task. Normalmente, teriamos um controller assim:</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Repositories<span class="token punctuation">\\</span>TaskRepository</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Repositories<span class="token punctuation">\\</span>UserRepository</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Mailers<span class="token punctuation">\\</span>UserMailer</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TasksController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @var Acme\\Repositories\\TaskRepository\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$tasks</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var Acme\\Repositories\\UserRepository\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$users</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var Acme\\Mailers\\UserMailer\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @param TaskRepository $tasks\n     * @param UserRepository $users\n     * @param UserMailer $mailer\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>\n        TaskRepository <span class="token variable">$tasks</span><span class="token punctuation">,</span> \n        UserRepository <span class="token variable">$users</span><span class="token punctuation">,</span> \n        UserMailer <span class="token variable">$mailer</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span> <span class="token operator">=</span> <span class="token variable">$tasks</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span> <span class="token operator">=</span> <span class="token variable">$users</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span> <span class="token operator">=</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @param string|int $task_id\n     * @param string|int $user_id\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$userTo</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$user_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$task</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$task</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token variable">$userTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token scope">Redirect<span class="token punctuation">::</span></span><span class="token function">to</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notifyTaskTransference</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">,</span> <span class="token variable">$userTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token scope">Redirect<span class="token punctuation">::</span></span><span class="token function">to</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'message\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token scope">Lang<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks.transfer.success\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>O código até que tá limpo, mas ainda dá pra melhorar.. Nosso Controller, que faz está fora da camada da nossa aplicação (faz parte do front-end, por assim dizer), sabe que temos repositórios, mailers, etc, etc.. Idealmente, nosso Controller deve saber apenas QUEM realiza suas tarefas e os possíveis erros. Uma forma muito mais limpa para tal modelo é utilizando Interactors, como mostrado abaixo:</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Tasks</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Repositories<span class="token punctuation">\\</span>TaskRepository</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Repositories<span class="token punctuation">\\</span>UserRepository</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Mailers<span class="token punctuation">\\</span>UserMailer</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>CannotTransferTaskException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TransferenceInteractor</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @var Acme\\Repositories\\TaskRepository\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$tasks</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var Acme\\Repositories\\UserRepository\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$users</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var Acme\\Mailers\\UserMailer\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @param TaskRepository $tasks\n     * @param UserRepository $users\n     * @param UserMailer $mailer\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>\n        TaskRepository <span class="token variable">$tasks</span><span class="token punctuation">,</span>\n        UserRepository <span class="token variable">$users</span><span class="token punctuation">,</span>\n        UserMailer <span class="token variable">$mailer</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span> <span class="token operator">=</span> <span class="token variable">$tasks</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span> <span class="token operator">=</span> <span class="token variable">$users</span><span class="token punctuation">;</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span> <span class="token operator">=</span> <span class="token variable">$mailer</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @param string|int $task_id\n     * @param string|int $user_id\n     * @return void\n     * @throws CannotTransferTaskException\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$userTo</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$user_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$task</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$task</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token variable">$userTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotTransferTaskException</span><span class="token punctuation">(</span><span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasks</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getErros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mailer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notifyTaskTransference</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">,</span> <span class="token variable">$userTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>Com isso, nosso interactor seria responsável por fazer a transferência da task e disparar exceptions em caso de erros. Nosso Controller ficaria muito mais limpo, assim:</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Tasks<span class="token punctuation">\\</span>TransferenceInteractor</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>CannotTransferTaskException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TasksController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @var Acme\\Interactors\\Tasks\\TransferenceInteractor\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$tasksDelivery</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @param TransferenceInteractor $tasksDelivery\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>TransceferenceInteractor <span class="token variable">$tasksDelivery</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasksDelivery</span> <span class="token operator">=</span> <span class="token variable">$tasksDelivery</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @param string|int $task_id\n     * @param string|int $user_id\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasksDelivery</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> <span class="token scope">Redirect<span class="token punctuation">::</span></span><span class="token function">to</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'message\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token scope">Lang<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks.transfer.success\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>CannotTransferTaskException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token scope">Redirect<span class="token punctuation">::</span></span><span class="token function">to</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getErrorMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></pre>\n<p>Pronto! Agora, nosso controller não sabe mais como fazemos as transferências das tasks. Apenas sabem QUEM faz e os possíveis erros retornados. Assim. Esse approach é muito mais elegante e limpo. Assim como muito mais fácil de testar e adicionar features e error handlers. Digamos que você tenha um watcher analisando as tasks em background para balancear as tasks com os desenvolvedores mais "folgados". Seria feito um cli-command para isso, assim:</p>\n<pre class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Input<span class="token punctuation">\\</span>InputArgument</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Tasks<span class="token punctuation">\\</span>TransferenceInteractor</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Interactors<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>CannotTransferTaskException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TaskTransferenceCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @var Acme\\Interactors\\Tasks\\TransferenceInteractor\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$tasksDelivery</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var string\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"acme:transfer-task"</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @var string\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Transfers a task to a given user"</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @param TransferenceInteractor $tasksDelivery\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>TransceferenceInteractor <span class="token variable">$tasksDelivery</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token scope"><span class="token keyword">parent</span><span class="token punctuation">::</span></span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tasksDelivery</span> <span class="token operator">=</span> <span class="token variable">$tasksDelivery</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * handles the command\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token variable">$task_id</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'task_id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$user_id</span> <span class="token operator">=</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'user_id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">taskDelivery</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token variable">$task_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token scope">Lang<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'tasks.transfer.success\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>CannotTransferTaskException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getErrorMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$message</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @return array\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">[</span><span class="token single-quoted-string string">\'task_id\'</span><span class="token punctuation">,</span> <span class="token scope">InputArgument<span class="token punctuation">::</span></span><span class="token constant">REQUIRED</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'The ID of the task to be transfered\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">[</span><span class="token single-quoted-string string">\'user_id\'</span><span class="token punctuation">,</span> <span class="token scope">InputArgument<span class="token punctuation">::</span></span><span class="token constant">REQUIRED</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'The id of the user to transfer the task to\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @return array\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span></span></pre>\n<p>O exemplo do command não foi dos melhores, mas espero que dê pra entender onde quero chegar com isso.</p>\n<p>É isso! O que vocês acham desse padrão? Como vocês organizam suas aplicações? Deixem um comentário ai e até a próxima!</p>\n'}}]}}}}}}]);